
LAB5_08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a4  080040a4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040ac  080040ac  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080040b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  2000007c  08004130  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08004130  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ce6  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001735  00000000  00000000  00028d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0002a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  0002abc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cbd  00000000  00000000  00040ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e08  00000000  00000000  00049860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf668  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f30  00000000  00000000  000cf6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e6c 	.word	0x08003e6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08003e6c 	.word	0x08003e6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fca4 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f80e 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8c8 	bl	8000734 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f89e 	bl	80006e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f872 	bl	8000690 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//	  uint8_t text[] = "HELLO FIBO";
//	  HAL_UART_Transmit(&huart2, text, 11, 10);

  UARTInterruptConfig();
 80005ac:	f000 f9c8 	bl	8000940 <UARTInterruptConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ReadButton1();
 80005b0:	f000 f94c 	bl	800084c <ReadButton1>
	  DummyTask();
 80005b4:	f000 f92c 	bl	8000810 <DummyTask>
	  ReadButton1();
 80005b8:	e7fa      	b.n	80005b0 <main+0x1c>
	...

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 ffd8 	bl	8003580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800062c:	2310      	movs	r3, #16
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000630:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000634:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000636:	2304      	movs	r3, #4
 8000638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063a:	2304      	movs	r3, #4
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fb1e 	bl	8001c84 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800064e:	f000 faab 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fd80 	bl	8002174 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067a:	f000 fa95 	bl	8000ba8 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART2_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 800069c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c8:	f001 ff74 	bl	80025b4 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 fa69 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000098 	.word	0x20000098
 80006e0:	40004400 	.word	0x40004400

080006e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_DMA_Init+0x4c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <MX_DMA_Init+0x4c>)
 80006f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_DMA_Init+0x4c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2010      	movs	r0, #16
 800070c:	f000 fd37 	bl	800117e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000710:	2010      	movs	r0, #16
 8000712:	f000 fd50 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2011      	movs	r0, #17
 800071c:	f000 fd2f 	bl	800117e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000720:	2011      	movs	r0, #17
 8000722:	f000 fd48 	bl	80011b6 <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a2c      	ldr	r2, [pc, #176]	; (8000804 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a25      	ldr	r2, [pc, #148]	; (8000804 <MX_GPIO_Init+0xd0>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <MX_GPIO_Init+0xd0>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0xd4>)
 80007c0:	f001 fa2c 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_GPIO_Init+0xd8>)
 80007dc:	f001 f882 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e0:	2320      	movs	r3, #32
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0xd4>)
 80007f8:	f001 f874 	bl	80018e4 <HAL_GPIO_Init>

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020800 	.word	0x40020800

08000810 <DummyTask>:
//	}
//}

//default 5Hz
void DummyTask()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 8000814:	f000 fbcc 	bl	8000fb0 <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <DummyTask+0x30>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	429a      	cmp	r2, r3
 8000820:	d30b      	bcc.n	800083a <DummyTask+0x2a>
		timestamp = HAL_GetTick() + delaytime;
 8000822:	f000 fbc5 	bl	8000fb0 <HAL_GetTick>
 8000826:	4603      	mov	r3, r0
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <DummyTask+0x34>)
 800082a:	6812      	ldr	r2, [r2, #0]
 800082c:	4413      	add	r3, r2
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <DummyTask+0x30>)
 8000830:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000832:	2120      	movs	r1, #32
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <DummyTask+0x38>)
 8000836:	f001 fa0a 	bl	8001c4e <HAL_GPIO_TogglePin>
	}
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200003fc 	.word	0x200003fc
 8000844:	20000004 	.word	0x20000004
 8000848:	40020000 	.word	0x40020000

0800084c <ReadButton1>:

void ReadButton1() {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
		Button1.Current = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000854:	4832      	ldr	r0, [pc, #200]	; (8000920 <ReadButton1+0xd4>)
 8000856:	f001 f9c9 	bl	8001bec <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	4b31      	ldr	r3, [pc, #196]	; (8000924 <ReadButton1+0xd8>)
 8000860:	701a      	strb	r2, [r3, #0]
		if (Button1.Current == GPIO_PIN_RESET && Button1.Last == GPIO_PIN_SET )
 8000862:	4b30      	ldr	r3, [pc, #192]	; (8000924 <ReadButton1+0xd8>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d152      	bne.n	8000910 <ReadButton1+0xc4>
 800086a:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <ReadButton1+0xd8>)
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d14e      	bne.n	8000910 <ReadButton1+0xc4>
		{
			if(menu == 2)
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <ReadButton1+0xdc>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b02      	cmp	r3, #2
 8000878:	d103      	bne.n	8000882 <ReadButton1+0x36>
			{
				menu = 0;
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <ReadButton1+0xdc>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	e00e      	b.n	80008a0 <ReadButton1+0x54>
			}
			else if (menu == 0)
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <ReadButton1+0xdc>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d103      	bne.n	8000892 <ReadButton1+0x46>
			{
				menu = 1;
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <ReadButton1+0xdc>)
 800088c:	2201      	movs	r2, #1
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	e006      	b.n	80008a0 <ReadButton1+0x54>
			}
			else if (menu == 1)
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <ReadButton1+0xdc>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d102      	bne.n	80008a0 <ReadButton1+0x54>
			{
				menu = 0;
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <ReadButton1+0xdc>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
			}

			switch(menu)
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <ReadButton1+0xdc>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d024      	beq.n	80008f2 <ReadButton1+0xa6>
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	dc32      	bgt.n	8000912 <ReadButton1+0xc6>
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <ReadButton1+0x6a>
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d00f      	beq.n	80008d4 <ReadButton1+0x88>
 80008b4:	e02d      	b.n	8000912 <ReadButton1+0xc6>
			{
			case 0:
				sprintf((char*)TextBuffer, "----------------------------------\r\n\     Menu 0 :  LED Control\r\n   a: Speed Up   +1Hz\r\n   s: Speed Down -1Hz\r\n   d: On/Off\r\n   x: Back\r\n----------------------------------\r\n\0");
 80008b6:	491d      	ldr	r1, [pc, #116]	; (800092c <ReadButton1+0xe0>)
 80008b8:	481d      	ldr	r0, [pc, #116]	; (8000930 <ReadButton1+0xe4>)
 80008ba:	f002 fe69 	bl	8003590 <siprintf>
				HAL_UART_Transmit_IT(&huart2,TextBuffer, strlen((char*)TextBuffer));
 80008be:	481c      	ldr	r0, [pc, #112]	; (8000930 <ReadButton1+0xe4>)
 80008c0:	f7ff fc8e 	bl	80001e0 <strlen>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	4919      	ldr	r1, [pc, #100]	; (8000930 <ReadButton1+0xe4>)
 80008cc:	4819      	ldr	r0, [pc, #100]	; (8000934 <ReadButton1+0xe8>)
 80008ce:	f001 febe 	bl	800264e <HAL_UART_Transmit_IT>
				break;
 80008d2:	e01e      	b.n	8000912 <ReadButton1+0xc6>
			case 1:
				sprintf((char*)TextBuffer, "----------------------------------\r\n\     Menu 1 : Button Status\r\n   x: Back\r\n   Button 1 Pressed\r\n----------------------------------\r\n\0");
 80008d4:	4918      	ldr	r1, [pc, #96]	; (8000938 <ReadButton1+0xec>)
 80008d6:	4816      	ldr	r0, [pc, #88]	; (8000930 <ReadButton1+0xe4>)
 80008d8:	f002 fe5a 	bl	8003590 <siprintf>
				HAL_UART_Transmit_IT(&huart2,TextBuffer, strlen((char*)TextBuffer));
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <ReadButton1+0xe4>)
 80008de:	f7ff fc7f 	bl	80001e0 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	461a      	mov	r2, r3
 80008e8:	4911      	ldr	r1, [pc, #68]	; (8000930 <ReadButton1+0xe4>)
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <ReadButton1+0xe8>)
 80008ec:	f001 feaf 	bl	800264e <HAL_UART_Transmit_IT>
				break;
 80008f0:	e00f      	b.n	8000912 <ReadButton1+0xc6>
			case 2:
				sprintf((char*)TextBuffer, "----------------------------------\r\n     Unpressed\r\n\0");
 80008f2:	4912      	ldr	r1, [pc, #72]	; (800093c <ReadButton1+0xf0>)
 80008f4:	480e      	ldr	r0, [pc, #56]	; (8000930 <ReadButton1+0xe4>)
 80008f6:	f002 fe4b 	bl	8003590 <siprintf>
				HAL_UART_Transmit_IT(&huart2,TextBuffer, strlen((char*)TextBuffer));
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <ReadButton1+0xe4>)
 80008fc:	f7ff fc70 	bl	80001e0 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	b29b      	uxth	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	490a      	ldr	r1, [pc, #40]	; (8000930 <ReadButton1+0xe4>)
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <ReadButton1+0xe8>)
 800090a:	f001 fea0 	bl	800264e <HAL_UART_Transmit_IT>
				break;
 800090e:	e000      	b.n	8000912 <ReadButton1+0xc6>
			}
		}
 8000910:	bf00      	nop
		Button1.Last = Button1.Current;
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <ReadButton1+0xd8>)
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	4b03      	ldr	r3, [pc, #12]	; (8000924 <ReadButton1+0xd8>)
 8000918:	705a      	strb	r2, [r3, #1]

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40020800 	.word	0x40020800
 8000924:	2000019c 	.word	0x2000019c
 8000928:	20000000 	.word	0x20000000
 800092c:	08003e84 	.word	0x08003e84
 8000930:	20000208 	.word	0x20000208
 8000934:	20000098 	.word	0x20000098
 8000938:	08003f34 	.word	0x08003f34
 800093c:	08003fbc 	.word	0x08003fbc

08000940 <UARTInterruptConfig>:

void UARTInterruptConfig()
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	4903      	ldr	r1, [pc, #12]	; (8000954 <UARTInterruptConfig+0x14>)
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <UARTInterruptConfig+0x18>)
 800094a:	f001 fec5 	bl	80026d8 <HAL_UART_Receive_IT>
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200001a0 	.word	0x200001a0
 8000958:	20000098 	.word	0x20000098

0800095c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a84      	ldr	r2, [pc, #528]	; (8000b78 <HAL_UART_RxCpltCallback+0x21c>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d116      	bne.n	800099a <HAL_UART_RxCpltCallback+0x3e>
	{
		RxBuffer[1] = '\0';
 800096c:	4b83      	ldr	r3, [pc, #524]	; (8000b7c <HAL_UART_RxCpltCallback+0x220>)
 800096e:	2200      	movs	r2, #0
 8000970:	705a      	strb	r2, [r3, #1]
		sprintf((char*)TxBuffer, "Received : %s\r\n\0", RxBuffer);
 8000972:	4a82      	ldr	r2, [pc, #520]	; (8000b7c <HAL_UART_RxCpltCallback+0x220>)
 8000974:	4982      	ldr	r1, [pc, #520]	; (8000b80 <HAL_UART_RxCpltCallback+0x224>)
 8000976:	4883      	ldr	r0, [pc, #524]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000978:	f002 fe0a 	bl	8003590 <siprintf>
		HAL_UART_Transmit_IT(&huart2, TxBuffer , strlen((char*)TxBuffer));
 800097c:	4881      	ldr	r0, [pc, #516]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 800097e:	f7ff fc2f 	bl	80001e0 <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	b29b      	uxth	r3, r3
 8000986:	461a      	mov	r2, r3
 8000988:	497e      	ldr	r1, [pc, #504]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 800098a:	487b      	ldr	r0, [pc, #492]	; (8000b78 <HAL_UART_RxCpltCallback+0x21c>)
 800098c:	f001 fe5f 	bl	800264e <HAL_UART_Transmit_IT>

		HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8000990:	2201      	movs	r2, #1
 8000992:	497a      	ldr	r1, [pc, #488]	; (8000b7c <HAL_UART_RxCpltCallback+0x220>)
 8000994:	4878      	ldr	r0, [pc, #480]	; (8000b78 <HAL_UART_RxCpltCallback+0x21c>)
 8000996:	f001 fe9f 	bl	80026d8 <HAL_UART_Receive_IT>
	}

	if (menu == 0)
 800099a:	4b7b      	ldr	r3, [pc, #492]	; (8000b88 <HAL_UART_RxCpltCallback+0x22c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f040 80bb 	bne.w	8000b1a <HAL_UART_RxCpltCallback+0x1be>
	{
		switch(RxBuffer[0])
 80009a4:	4b75      	ldr	r3, [pc, #468]	; (8000b7c <HAL_UART_RxCpltCallback+0x220>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	3b61      	subs	r3, #97	; 0x61
 80009aa:	2b17      	cmp	r3, #23
 80009ac:	f200 80a3 	bhi.w	8000af6 <HAL_UART_RxCpltCallback+0x19a>
 80009b0:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <HAL_UART_RxCpltCallback+0x5c>)
 80009b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b6:	bf00      	nop
 80009b8:	08000a19 	.word	0x08000a19
 80009bc:	08000af7 	.word	0x08000af7
 80009c0:	08000af7 	.word	0x08000af7
 80009c4:	08000aa5 	.word	0x08000aa5
 80009c8:	08000af7 	.word	0x08000af7
 80009cc:	08000af7 	.word	0x08000af7
 80009d0:	08000af7 	.word	0x08000af7
 80009d4:	08000af7 	.word	0x08000af7
 80009d8:	08000af7 	.word	0x08000af7
 80009dc:	08000af7 	.word	0x08000af7
 80009e0:	08000af7 	.word	0x08000af7
 80009e4:	08000af7 	.word	0x08000af7
 80009e8:	08000af7 	.word	0x08000af7
 80009ec:	08000af7 	.word	0x08000af7
 80009f0:	08000af7 	.word	0x08000af7
 80009f4:	08000af7 	.word	0x08000af7
 80009f8:	08000af7 	.word	0x08000af7
 80009fc:	08000af7 	.word	0x08000af7
 8000a00:	08000a5f 	.word	0x08000a5f
 8000a04:	08000af7 	.word	0x08000af7
 8000a08:	08000af7 	.word	0x08000af7
 8000a0c:	08000af7 	.word	0x08000af7
 8000a10:	08000af7 	.word	0x08000af7
 8000a14:	08000ad3 	.word	0x08000ad3
		{
			case 'a':
				frequency += 1 ;
 8000a18:	4b5c      	ldr	r3, [pc, #368]	; (8000b8c <HAL_UART_RxCpltCallback+0x230>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4a5b      	ldr	r2, [pc, #364]	; (8000b8c <HAL_UART_RxCpltCallback+0x230>)
 8000a20:	6013      	str	r3, [r2, #0]
				delaytime = 1000 / (frequency *2);
 8000a22:	4b5a      	ldr	r3, [pc, #360]	; (8000b8c <HAL_UART_RxCpltCallback+0x230>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a30:	4a57      	ldr	r2, [pc, #348]	; (8000b90 <HAL_UART_RxCpltCallback+0x234>)
 8000a32:	6013      	str	r3, [r2, #0]
				sprintf((char*)TxBuffer, "Frequency : %d\r\n\0",frequency);
 8000a34:	4b55      	ldr	r3, [pc, #340]	; (8000b8c <HAL_UART_RxCpltCallback+0x230>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4956      	ldr	r1, [pc, #344]	; (8000b94 <HAL_UART_RxCpltCallback+0x238>)
 8000a3c:	4851      	ldr	r0, [pc, #324]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000a3e:	f002 fda7 	bl	8003590 <siprintf>
				HAL_UART_Transmit_IT(&huart2, TxBuffer , strlen((char*)TxBuffer));
 8000a42:	4850      	ldr	r0, [pc, #320]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000a44:	f7ff fbcc 	bl	80001e0 <strlen>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	494d      	ldr	r1, [pc, #308]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000a50:	4849      	ldr	r0, [pc, #292]	; (8000b78 <HAL_UART_RxCpltCallback+0x21c>)
 8000a52:	f001 fdfc 	bl	800264e <HAL_UART_Transmit_IT>
				RxBuffer[0] = ' ';
 8000a56:	4b49      	ldr	r3, [pc, #292]	; (8000b7c <HAL_UART_RxCpltCallback+0x220>)
 8000a58:	2220      	movs	r2, #32
 8000a5a:	701a      	strb	r2, [r3, #0]
				break;
 8000a5c:	e088      	b.n	8000b70 <HAL_UART_RxCpltCallback+0x214>
			case 's':
				frequency -= 1 ;
 8000a5e:	4b4b      	ldr	r3, [pc, #300]	; (8000b8c <HAL_UART_RxCpltCallback+0x230>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	4a49      	ldr	r2, [pc, #292]	; (8000b8c <HAL_UART_RxCpltCallback+0x230>)
 8000a66:	6013      	str	r3, [r2, #0]
				delaytime = 1000 / (frequency *2);
 8000a68:	4b48      	ldr	r3, [pc, #288]	; (8000b8c <HAL_UART_RxCpltCallback+0x230>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a72:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a76:	4a46      	ldr	r2, [pc, #280]	; (8000b90 <HAL_UART_RxCpltCallback+0x234>)
 8000a78:	6013      	str	r3, [r2, #0]
				sprintf((char*)TxBuffer, "Frequency : %d\r\n\0",frequency);
 8000a7a:	4b44      	ldr	r3, [pc, #272]	; (8000b8c <HAL_UART_RxCpltCallback+0x230>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4944      	ldr	r1, [pc, #272]	; (8000b94 <HAL_UART_RxCpltCallback+0x238>)
 8000a82:	4840      	ldr	r0, [pc, #256]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000a84:	f002 fd84 	bl	8003590 <siprintf>
				HAL_UART_Transmit_IT(&huart2, TxBuffer , strlen((char*)TxBuffer));
 8000a88:	483e      	ldr	r0, [pc, #248]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000a8a:	f7ff fba9 	bl	80001e0 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	493b      	ldr	r1, [pc, #236]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000a96:	4838      	ldr	r0, [pc, #224]	; (8000b78 <HAL_UART_RxCpltCallback+0x21c>)
 8000a98:	f001 fdd9 	bl	800264e <HAL_UART_Transmit_IT>
				RxBuffer[0] = ' ';
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <HAL_UART_RxCpltCallback+0x220>)
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	701a      	strb	r2, [r3, #0]
				break;
 8000aa2:	e065      	b.n	8000b70 <HAL_UART_RxCpltCallback+0x214>
			case 'd':
			    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	483b      	ldr	r0, [pc, #236]	; (8000b98 <HAL_UART_RxCpltCallback+0x23c>)
 8000aaa:	f001 f8b7 	bl	8001c1c <HAL_GPIO_WritePin>
			    sprintf((char*)TxBuffer, "LED Off \r\n\0");
 8000aae:	493b      	ldr	r1, [pc, #236]	; (8000b9c <HAL_UART_RxCpltCallback+0x240>)
 8000ab0:	4834      	ldr	r0, [pc, #208]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000ab2:	f002 fd6d 	bl	8003590 <siprintf>
			    HAL_UART_Transmit_IT(&huart2, TxBuffer , strlen((char*)TxBuffer));
 8000ab6:	4833      	ldr	r0, [pc, #204]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000ab8:	f7ff fb92 	bl	80001e0 <strlen>
 8000abc:	4603      	mov	r3, r0
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4930      	ldr	r1, [pc, #192]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000ac4:	482c      	ldr	r0, [pc, #176]	; (8000b78 <HAL_UART_RxCpltCallback+0x21c>)
 8000ac6:	f001 fdc2 	bl	800264e <HAL_UART_Transmit_IT>
			    RxBuffer[0] = ' ';
 8000aca:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <HAL_UART_RxCpltCallback+0x220>)
 8000acc:	2220      	movs	r2, #32
 8000ace:	701a      	strb	r2, [r3, #0]
				break;
 8000ad0:	e04e      	b.n	8000b70 <HAL_UART_RxCpltCallback+0x214>
			case 'x':
				sprintf((char*)TxBuffer, "Button1 Unpressed\r\n\0");
 8000ad2:	4933      	ldr	r1, [pc, #204]	; (8000ba0 <HAL_UART_RxCpltCallback+0x244>)
 8000ad4:	482b      	ldr	r0, [pc, #172]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000ad6:	f002 fd5b 	bl	8003590 <siprintf>
				HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000ada:	482a      	ldr	r0, [pc, #168]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000adc:	f7ff fb80 	bl	80001e0 <strlen>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4927      	ldr	r1, [pc, #156]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000ae8:	4823      	ldr	r0, [pc, #140]	; (8000b78 <HAL_UART_RxCpltCallback+0x21c>)
 8000aea:	f001 fdb0 	bl	800264e <HAL_UART_Transmit_IT>
				menu = 2;
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <HAL_UART_RxCpltCallback+0x22c>)
 8000af0:	2202      	movs	r2, #2
 8000af2:	601a      	str	r2, [r3, #0]
			break;
 8000af4:	e03c      	b.n	8000b70 <HAL_UART_RxCpltCallback+0x214>
			default :
				sprintf((char*)TxBuffer, "Wrong Button\r\n\0",frequency);
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <HAL_UART_RxCpltCallback+0x230>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4929      	ldr	r1, [pc, #164]	; (8000ba4 <HAL_UART_RxCpltCallback+0x248>)
 8000afe:	4821      	ldr	r0, [pc, #132]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000b00:	f002 fd46 	bl	8003590 <siprintf>
				HAL_UART_Transmit_IT(&huart2, TxBuffer , strlen((char*)TxBuffer));
 8000b04:	481f      	ldr	r0, [pc, #124]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000b06:	f7ff fb6b 	bl	80001e0 <strlen>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	491c      	ldr	r1, [pc, #112]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000b12:	4819      	ldr	r0, [pc, #100]	; (8000b78 <HAL_UART_RxCpltCallback+0x21c>)
 8000b14:	f001 fd9b 	bl	800264e <HAL_UART_Transmit_IT>
			break;
 8000b18:	e02a      	b.n	8000b70 <HAL_UART_RxCpltCallback+0x214>
	}
	}
	else if(menu = 1)
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_UART_RxCpltCallback+0x22c>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
	{
		switch (RxBuffer[0])
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_UART_RxCpltCallback+0x220>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b78      	cmp	r3, #120	; 0x78
 8000b26:	d111      	bne.n	8000b4c <HAL_UART_RxCpltCallback+0x1f0>
		{
			case 'x':
			sprintf((char*)TxBuffer, "Button1 Unpressed\r\n\0");
 8000b28:	491d      	ldr	r1, [pc, #116]	; (8000ba0 <HAL_UART_RxCpltCallback+0x244>)
 8000b2a:	4816      	ldr	r0, [pc, #88]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000b2c:	f002 fd30 	bl	8003590 <siprintf>
			HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000b30:	4814      	ldr	r0, [pc, #80]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000b32:	f7ff fb55 	bl	80001e0 <strlen>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4911      	ldr	r1, [pc, #68]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000b3e:	480e      	ldr	r0, [pc, #56]	; (8000b78 <HAL_UART_RxCpltCallback+0x21c>)
 8000b40:	f001 fd85 	bl	800264e <HAL_UART_Transmit_IT>
			menu = 2;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_UART_RxCpltCallback+0x22c>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	601a      	str	r2, [r3, #0]
			break;
 8000b4a:	e011      	b.n	8000b70 <HAL_UART_RxCpltCallback+0x214>

			default :
				sprintf((char*)TxBuffer, "Wrong Button\r\n\0",frequency);
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_UART_RxCpltCallback+0x230>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4914      	ldr	r1, [pc, #80]	; (8000ba4 <HAL_UART_RxCpltCallback+0x248>)
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000b56:	f002 fd1b 	bl	8003590 <siprintf>
				HAL_UART_Transmit_IT(&huart2, TxBuffer , strlen((char*)TxBuffer));
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000b5c:	f7ff fb40 	bl	80001e0 <strlen>
 8000b60:	4603      	mov	r3, r0
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	4907      	ldr	r1, [pc, #28]	; (8000b84 <HAL_UART_RxCpltCallback+0x228>)
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <HAL_UART_RxCpltCallback+0x21c>)
 8000b6a:	f001 fd70 	bl	800264e <HAL_UART_Transmit_IT>
			break;
 8000b6e:	bf00      	nop
		}
	}
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000098 	.word	0x20000098
 8000b7c:	200001a0 	.word	0x200001a0
 8000b80:	08003ff4 	.word	0x08003ff4
 8000b84:	200001a4 	.word	0x200001a4
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000004 	.word	0x20000004
 8000b94:	08004008 	.word	0x08004008
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	0800401c 	.word	0x0800401c
 8000ba0:	08004028 	.word	0x08004028
 8000ba4:	08004040 	.word	0x08004040

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x8>
	...

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf2:	2007      	movs	r0, #7
 8000bf4:	f000 fab8 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a4c      	ldr	r2, [pc, #304]	; (8000d54 <HAL_UART_MspInit+0x150>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	f040 8091 	bne.w	8000d4a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <HAL_UART_MspInit+0x154>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	4a49      	ldr	r2, [pc, #292]	; (8000d58 <HAL_UART_MspInit+0x154>)
 8000c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c36:	6413      	str	r3, [r2, #64]	; 0x40
 8000c38:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <HAL_UART_MspInit+0x154>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4b43      	ldr	r3, [pc, #268]	; (8000d58 <HAL_UART_MspInit+0x154>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a42      	ldr	r2, [pc, #264]	; (8000d58 <HAL_UART_MspInit+0x154>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
 8000c54:	4b40      	ldr	r3, [pc, #256]	; (8000d58 <HAL_UART_MspInit+0x154>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c60:	230c      	movs	r3, #12
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c70:	2307      	movs	r3, #7
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4838      	ldr	r0, [pc, #224]	; (8000d5c <HAL_UART_MspInit+0x158>)
 8000c7c:	f000 fe32 	bl	80018e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c80:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000c82:	4a38      	ldr	r2, [pc, #224]	; (8000d64 <HAL_UART_MspInit+0x160>)
 8000c84:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c86:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000c88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c94:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c9a:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ca8:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cc2:	4827      	ldr	r0, [pc, #156]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000cc4:	f000 fa92 	bl	80011ec <HAL_DMA_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000cce:	f7ff ff6b 	bl	8000ba8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a22      	ldr	r2, [pc, #136]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
 8000cd8:	4a21      	ldr	r2, [pc, #132]	; (8000d60 <HAL_UART_MspInit+0x15c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000cde:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000ce0:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <HAL_UART_MspInit+0x168>)
 8000ce2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cea:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cfe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d1e:	4812      	ldr	r0, [pc, #72]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000d20:	f000 fa64 	bl	80011ec <HAL_DMA_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000d2a:	f7ff ff3d 	bl	8000ba8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000d32:	635a      	str	r2, [r3, #52]	; 0x34
 8000d34:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <HAL_UART_MspInit+0x164>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2026      	movs	r0, #38	; 0x26
 8000d40:	f000 fa1d 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d44:	2026      	movs	r0, #38	; 0x26
 8000d46:	f000 fa36 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40004400 	.word	0x40004400
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	200000dc 	.word	0x200000dc
 8000d64:	40026088 	.word	0x40026088
 8000d68:	2000013c 	.word	0x2000013c
 8000d6c:	400260a0 	.word	0x400260a0

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbc:	f000 f8e4 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <DMA1_Stream5_IRQHandler+0x10>)
 8000dca:	f000 fb4f 	bl	800146c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200000dc 	.word	0x200000dc

08000dd8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <DMA1_Stream6_IRQHandler+0x10>)
 8000dde:	f000 fb45 	bl	800146c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000013c 	.word	0x2000013c

08000dec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <USART2_IRQHandler+0x10>)
 8000df2:	f001 fca1 	bl	8002738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000098 	.word	0x20000098

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f002 fb7c 	bl	800352c <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20020000 	.word	0x20020000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	20000400 	.word	0x20000400
 8000e68:	20000418 	.word	0x20000418

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eba:	f7ff ffd7 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f002 fb3b 	bl	8003538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fb67 	bl	8000594 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ed4:	080040b4 	.word	0x080040b4
  ldr r2, =_sbss
 8000ed8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000edc:	20000418 	.word	0x20000418

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <HAL_Init+0x40>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_Init+0x40>)
 8000efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x40>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f92b 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fe4c 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f943 	bl	80011d2 <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f000 f90b 	bl	800117e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000000c 	.word	0x2000000c
 8000f80:	20000014 	.word	0x20000014
 8000f84:	20000010 	.word	0x20000010

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000014 	.word	0x20000014
 8000fac:	20000404 	.word	0x20000404

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000404 	.word	0x20000404

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff29 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff3e 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff8e 	bl	80010bc <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5d 	bl	8001068 <__NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff31 	bl	800102c <__NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffa2 	bl	8001124 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011f8:	f7ff feda 	bl	8000fb0 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e099      	b.n	800133c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2202      	movs	r2, #2
 800120c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001228:	e00f      	b.n	800124a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800122a:	f7ff fec1 	bl	8000fb0 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b05      	cmp	r3, #5
 8001236:	d908      	bls.n	800124a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2220      	movs	r2, #32
 800123c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2203      	movs	r2, #3
 8001242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e078      	b.n	800133c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1e8      	bne.n	800122a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	4b38      	ldr	r3, [pc, #224]	; (8001344 <HAL_DMA_Init+0x158>)
 8001264:	4013      	ands	r3, r2
 8001266:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001276:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800128e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4313      	orrs	r3, r2
 800129a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d107      	bne.n	80012b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4313      	orrs	r3, r2
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f023 0307 	bic.w	r3, r3, #7
 80012ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d117      	bne.n	800130e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00e      	beq.n	800130e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 fa7b 	bl	80017ec <DMA_CheckFifoParam>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d008      	beq.n	800130e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2240      	movs	r2, #64	; 0x40
 8001300:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800130a:	2301      	movs	r3, #1
 800130c:	e016      	b.n	800133c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 fa32 	bl	8001780 <DMA_CalcBaseAndBitshift>
 800131c:	4603      	mov	r3, r0
 800131e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001324:	223f      	movs	r2, #63	; 0x3f
 8001326:	409a      	lsls	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	f010803f 	.word	0xf010803f

08001348 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001354:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001356:	f7ff fe2b 	bl	8000fb0 <HAL_GetTick>
 800135a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d008      	beq.n	800137a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e052      	b.n	8001420 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0216 	bic.w	r2, r2, #22
 8001388:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	695a      	ldr	r2, [r3, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001398:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d103      	bne.n	80013aa <HAL_DMA_Abort+0x62>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0208 	bic.w	r2, r2, #8
 80013b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0201 	bic.w	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ca:	e013      	b.n	80013f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013cc:	f7ff fdf0 	bl	8000fb0 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d90c      	bls.n	80013f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2220      	movs	r2, #32
 80013de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2203      	movs	r2, #3
 80013e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e015      	b.n	8001420 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1e4      	bne.n	80013cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001406:	223f      	movs	r2, #63	; 0x3f
 8001408:	409a      	lsls	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d004      	beq.n	8001446 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2280      	movs	r2, #128	; 0x80
 8001440:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e00c      	b.n	8001460 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0201 	bic.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001478:	4b8e      	ldr	r3, [pc, #568]	; (80016b4 <HAL_DMA_IRQHandler+0x248>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a8e      	ldr	r2, [pc, #568]	; (80016b8 <HAL_DMA_IRQHandler+0x24c>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	0a9b      	lsrs	r3, r3, #10
 8001484:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001496:	2208      	movs	r2, #8
 8001498:	409a      	lsls	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d01a      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0204 	bic.w	r2, r2, #4
 80014be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c4:	2208      	movs	r2, #8
 80014c6:	409a      	lsls	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d0:	f043 0201 	orr.w	r2, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014dc:	2201      	movs	r2, #1
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d012      	beq.n	800150e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00b      	beq.n	800150e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fa:	2201      	movs	r2, #1
 80014fc:	409a      	lsls	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001506:	f043 0202 	orr.w	r2, r3, #2
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001512:	2204      	movs	r2, #4
 8001514:	409a      	lsls	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d012      	beq.n	8001544 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00b      	beq.n	8001544 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001530:	2204      	movs	r2, #4
 8001532:	409a      	lsls	r2, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	f043 0204 	orr.w	r2, r3, #4
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001548:	2210      	movs	r2, #16
 800154a:	409a      	lsls	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d043      	beq.n	80015dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d03c      	beq.n	80015dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001566:	2210      	movs	r2, #16
 8001568:	409a      	lsls	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d018      	beq.n	80015ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d108      	bne.n	800159c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	2b00      	cmp	r3, #0
 8001590:	d024      	beq.n	80015dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	4798      	blx	r3
 800159a:	e01f      	b.n	80015dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01b      	beq.n	80015dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	4798      	blx	r3
 80015ac:	e016      	b.n	80015dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d107      	bne.n	80015cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0208 	bic.w	r2, r2, #8
 80015ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e0:	2220      	movs	r2, #32
 80015e2:	409a      	lsls	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 808f 	beq.w	800170c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 8087 	beq.w	800170c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	2220      	movs	r2, #32
 8001604:	409a      	lsls	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b05      	cmp	r3, #5
 8001614:	d136      	bne.n	8001684 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0216 	bic.w	r2, r2, #22
 8001624:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001634:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	2b00      	cmp	r3, #0
 800163c:	d103      	bne.n	8001646 <HAL_DMA_IRQHandler+0x1da>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0208 	bic.w	r2, r2, #8
 8001654:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165a:	223f      	movs	r2, #63	; 0x3f
 800165c:	409a      	lsls	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001676:	2b00      	cmp	r3, #0
 8001678:	d07e      	beq.n	8001778 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	4798      	blx	r3
        }
        return;
 8001682:	e079      	b.n	8001778 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d01d      	beq.n	80016ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10d      	bne.n	80016bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d031      	beq.n	800170c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
 80016b0:	e02c      	b.n	800170c <HAL_DMA_IRQHandler+0x2a0>
 80016b2:	bf00      	nop
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d023      	beq.n	800170c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	4798      	blx	r3
 80016cc:	e01e      	b.n	800170c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10f      	bne.n	80016fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0210 	bic.w	r2, r2, #16
 80016ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	2b00      	cmp	r3, #0
 8001712:	d032      	beq.n	800177a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d022      	beq.n	8001766 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2205      	movs	r2, #5
 8001724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	3301      	adds	r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	d307      	bcc.n	8001754 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f2      	bne.n	8001738 <HAL_DMA_IRQHandler+0x2cc>
 8001752:	e000      	b.n	8001756 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001754:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
 8001776:	e000      	b.n	800177a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001778:	bf00      	nop
    }
  }
}
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	3b10      	subs	r3, #16
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <DMA_CalcBaseAndBitshift+0x64>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800179a:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <DMA_CalcBaseAndBitshift+0x68>)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d909      	bls.n	80017c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017b6:	f023 0303 	bic.w	r3, r3, #3
 80017ba:	1d1a      	adds	r2, r3, #4
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	659a      	str	r2, [r3, #88]	; 0x58
 80017c0:	e007      	b.n	80017d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	aaaaaaab 	.word	0xaaaaaaab
 80017e8:	08004068 	.word	0x08004068

080017ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d11f      	bne.n	8001846 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b03      	cmp	r3, #3
 800180a:	d856      	bhi.n	80018ba <DMA_CheckFifoParam+0xce>
 800180c:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <DMA_CheckFifoParam+0x28>)
 800180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001812:	bf00      	nop
 8001814:	08001825 	.word	0x08001825
 8001818:	08001837 	.word	0x08001837
 800181c:	08001825 	.word	0x08001825
 8001820:	080018bb 	.word	0x080018bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d046      	beq.n	80018be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001834:	e043      	b.n	80018be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800183e:	d140      	bne.n	80018c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001844:	e03d      	b.n	80018c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800184e:	d121      	bne.n	8001894 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b03      	cmp	r3, #3
 8001854:	d837      	bhi.n	80018c6 <DMA_CheckFifoParam+0xda>
 8001856:	a201      	add	r2, pc, #4	; (adr r2, 800185c <DMA_CheckFifoParam+0x70>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	0800186d 	.word	0x0800186d
 8001860:	08001873 	.word	0x08001873
 8001864:	0800186d 	.word	0x0800186d
 8001868:	08001885 	.word	0x08001885
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
      break;
 8001870:	e030      	b.n	80018d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d025      	beq.n	80018ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001882:	e022      	b.n	80018ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800188c:	d11f      	bne.n	80018ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001892:	e01c      	b.n	80018ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d903      	bls.n	80018a2 <DMA_CheckFifoParam+0xb6>
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d003      	beq.n	80018a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018a0:	e018      	b.n	80018d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
      break;
 80018a6:	e015      	b.n	80018d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00e      	beq.n	80018d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
      break;
 80018b8:	e00b      	b.n	80018d2 <DMA_CheckFifoParam+0xe6>
      break;
 80018ba:	bf00      	nop
 80018bc:	e00a      	b.n	80018d4 <DMA_CheckFifoParam+0xe8>
      break;
 80018be:	bf00      	nop
 80018c0:	e008      	b.n	80018d4 <DMA_CheckFifoParam+0xe8>
      break;
 80018c2:	bf00      	nop
 80018c4:	e006      	b.n	80018d4 <DMA_CheckFifoParam+0xe8>
      break;
 80018c6:	bf00      	nop
 80018c8:	e004      	b.n	80018d4 <DMA_CheckFifoParam+0xe8>
      break;
 80018ca:	bf00      	nop
 80018cc:	e002      	b.n	80018d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80018ce:	bf00      	nop
 80018d0:	e000      	b.n	80018d4 <DMA_CheckFifoParam+0xe8>
      break;
 80018d2:	bf00      	nop
    }
  } 
  
  return status; 
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	e159      	b.n	8001bb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001900:	2201      	movs	r2, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	429a      	cmp	r2, r3
 800191a:	f040 8148 	bne.w	8001bae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d005      	beq.n	8001936 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001932:	2b02      	cmp	r3, #2
 8001934:	d130      	bne.n	8001998 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2203      	movs	r2, #3
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 0201 	and.w	r2, r3, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d017      	beq.n	80019d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d123      	bne.n	8001a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	08da      	lsrs	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3208      	adds	r2, #8
 80019e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	220f      	movs	r2, #15
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3208      	adds	r2, #8
 8001a22:	69b9      	ldr	r1, [r7, #24]
 8001a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0203 	and.w	r2, r3, #3
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80a2 	beq.w	8001bae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <HAL_GPIO_Init+0x2e8>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a56      	ldr	r2, [pc, #344]	; (8001bcc <HAL_GPIO_Init+0x2e8>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b54      	ldr	r3, [pc, #336]	; (8001bcc <HAL_GPIO_Init+0x2e8>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a86:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_GPIO_Init+0x2ec>)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a49      	ldr	r2, [pc, #292]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d019      	beq.n	8001ae6 <HAL_GPIO_Init+0x202>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a48      	ldr	r2, [pc, #288]	; (8001bd8 <HAL_GPIO_Init+0x2f4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d013      	beq.n	8001ae2 <HAL_GPIO_Init+0x1fe>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <HAL_GPIO_Init+0x2f8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00d      	beq.n	8001ade <HAL_GPIO_Init+0x1fa>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a46      	ldr	r2, [pc, #280]	; (8001be0 <HAL_GPIO_Init+0x2fc>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d007      	beq.n	8001ada <HAL_GPIO_Init+0x1f6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a45      	ldr	r2, [pc, #276]	; (8001be4 <HAL_GPIO_Init+0x300>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d101      	bne.n	8001ad6 <HAL_GPIO_Init+0x1f2>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e008      	b.n	8001ae8 <HAL_GPIO_Init+0x204>
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x204>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e004      	b.n	8001ae8 <HAL_GPIO_Init+0x204>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_Init+0x204>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x204>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	f002 0203 	and.w	r2, r2, #3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4093      	lsls	r3, r2
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af8:	4935      	ldr	r1, [pc, #212]	; (8001bd0 <HAL_GPIO_Init+0x2ec>)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2a:	4a2f      	ldr	r2, [pc, #188]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b30:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b54:	4a24      	ldr	r2, [pc, #144]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b7e:	4a1a      	ldr	r2, [pc, #104]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba8:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <HAL_GPIO_Init+0x304>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	f67f aea2 	bls.w	8001900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40013c00 	.word	0x40013c00

08001bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e001      	b.n	8001c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c2c:	787b      	ldrb	r3, [r7, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c38:	e003      	b.n	8001c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	041a      	lsls	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b085      	sub	sp, #20
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c60:	887a      	ldrh	r2, [r7, #2]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4013      	ands	r3, r2
 8001c66:	041a      	lsls	r2, r3, #16
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	400b      	ands	r3, r1
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	619a      	str	r2, [r3, #24]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e267      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d075      	beq.n	8001d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ca2:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d00c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cae:	4b85      	ldr	r3, [pc, #532]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d112      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cba:	4b82      	ldr	r3, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	4b7e      	ldr	r3, [pc, #504]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d05b      	beq.n	8001d8c <HAL_RCC_OscConfig+0x108>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d157      	bne.n	8001d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e242      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x74>
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a75      	ldr	r2, [pc, #468]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e01d      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a6f      	ldr	r2, [pc, #444]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b6d      	ldr	r3, [pc, #436]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a6c      	ldr	r2, [pc, #432]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001d1c:	4b69      	ldr	r3, [pc, #420]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a68      	ldr	r2, [pc, #416]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b66      	ldr	r3, [pc, #408]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a65      	ldr	r2, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f938 	bl	8000fb0 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff f934 	bl	8000fb0 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e207      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0xc0>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff f924 	bl	8000fb0 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff f920 	bl	8000fb0 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1f3      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0xe8>
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d063      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d9a:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d11c      	bne.n	8001dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db2:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d116      	bne.n	8001dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e1c7      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4937      	ldr	r1, [pc, #220]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	e03a      	b.n	8001e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df4:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <HAL_RCC_OscConfig+0x244>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff f8d9 	bl	8000fb0 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e02:	f7ff f8d5 	bl	8000fb0 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1a8      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4925      	ldr	r1, [pc, #148]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
 8001e34:	e015      	b.n	8001e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_OscConfig+0x244>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f8b8 	bl	8000fb0 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e44:	f7ff f8b4 	bl	8000fb0 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e187      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d036      	beq.n	8001edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d016      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_RCC_OscConfig+0x248>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff f898 	bl	8000fb0 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e84:	f7ff f894 	bl	8000fb0 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e167      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x200>
 8001ea2:	e01b      	b.n	8001edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_OscConfig+0x248>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f881 	bl	8000fb0 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb0:	e00e      	b.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7ff f87d 	bl	8000fb0 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d907      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e150      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	42470000 	.word	0x42470000
 8001ecc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	4b88      	ldr	r3, [pc, #544]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ea      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8097 	beq.w	8002018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eee:	4b81      	ldr	r3, [pc, #516]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	4b7d      	ldr	r3, [pc, #500]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a7c      	ldr	r2, [pc, #496]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b7a      	ldr	r3, [pc, #488]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	4b77      	ldr	r3, [pc, #476]	; (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f26:	4b74      	ldr	r3, [pc, #464]	; (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a73      	ldr	r2, [pc, #460]	; (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f32:	f7ff f83d 	bl	8000fb0 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3a:	f7ff f839 	bl	8000fb0 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e10c      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2ea>
 8001f60:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a63      	ldr	r2, [pc, #396]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6c:	e01c      	b.n	8001fa8 <HAL_RCC_OscConfig+0x324>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x30c>
 8001f76:	4b5f      	ldr	r3, [pc, #380]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	4a5e      	ldr	r2, [pc, #376]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6713      	str	r3, [r2, #112]	; 0x70
 8001f82:	4b5c      	ldr	r3, [pc, #368]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f86:	4a5b      	ldr	r2, [pc, #364]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x324>
 8001f90:	4b58      	ldr	r3, [pc, #352]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	4a57      	ldr	r2, [pc, #348]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9c:	4b55      	ldr	r3, [pc, #340]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa0:	4a54      	ldr	r2, [pc, #336]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	f023 0304 	bic.w	r3, r3, #4
 8001fa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d015      	beq.n	8001fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7fe fffe 	bl	8000fb0 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7fe fffa 	bl	8000fb0 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e0cb      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	4b49      	ldr	r3, [pc, #292]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0ee      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x334>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7fe ffe8 	bl	8000fb0 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7fe ffe4 	bl	8000fb0 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e0b5      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ee      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	4a38      	ldr	r2, [pc, #224]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002016:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a1 	beq.w	8002164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002022:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d05c      	beq.n	80020e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d141      	bne.n	80020ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_RCC_OscConfig+0x478>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe ffb8 	bl	8000fb0 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002044:	f7fe ffb4 	bl	8000fb0 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e087      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002056:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	019b      	lsls	r3, r3, #6
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	085b      	lsrs	r3, r3, #1
 800207a:	3b01      	subs	r3, #1
 800207c:	041b      	lsls	r3, r3, #16
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	491b      	ldr	r1, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_RCC_OscConfig+0x478>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7fe ff8d 	bl	8000fb0 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209a:	f7fe ff89 	bl	8000fb0 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e05c      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x416>
 80020b8:	e054      	b.n	8002164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_RCC_OscConfig+0x478>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe ff76 	bl	8000fb0 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe ff72 	bl	8000fb0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e045      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCC_OscConfig+0x470>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x444>
 80020e6:	e03d      	b.n	8002164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e038      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40007000 	.word	0x40007000
 80020fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_RCC_OscConfig+0x4ec>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d028      	beq.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d121      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d11a      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002138:	4293      	cmp	r3, r2
 800213a:	d111      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	3b01      	subs	r3, #1
 800214a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d107      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0cc      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d90c      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b65      	ldr	r3, [pc, #404]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d044      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d119      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d003      	beq.n	8002232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800222e:	2b03      	cmp	r3, #3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e067      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b37      	ldr	r3, [pc, #220]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4934      	ldr	r1, [pc, #208]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7fe fea4 	bl	8000fb0 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7fe fea0 	bl	8000fb0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e04f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d20c      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fe04 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00
 8002330:	40023800 	.word	0x40023800
 8002334:	08004050 	.word	0x08004050
 8002338:	2000000c 	.word	0x2000000c
 800233c:	20000010 	.word	0x20000010

08002340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002344:	b094      	sub	sp, #80	; 0x50
 8002346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	647b      	str	r3, [r7, #68]	; 0x44
 800234c:	2300      	movs	r3, #0
 800234e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002350:	2300      	movs	r3, #0
 8002352:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002358:	4b79      	ldr	r3, [pc, #484]	; (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d00d      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x40>
 8002364:	2b08      	cmp	r3, #8
 8002366:	f200 80e1 	bhi.w	800252c <HAL_RCC_GetSysClockFreq+0x1ec>
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x34>
 800236e:	2b04      	cmp	r3, #4
 8002370:	d003      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x3a>
 8002372:	e0db      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b73      	ldr	r3, [pc, #460]	; (8002544 <HAL_RCC_GetSysClockFreq+0x204>)
 8002376:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002378:	e0db      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800237a:	4b73      	ldr	r3, [pc, #460]	; (8002548 <HAL_RCC_GetSysClockFreq+0x208>)
 800237c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800237e:	e0d8      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002380:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002388:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800238a:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d063      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002396:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	2200      	movs	r2, #0
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
 80023aa:	2300      	movs	r3, #0
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
 80023ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023b2:	4622      	mov	r2, r4
 80023b4:	462b      	mov	r3, r5
 80023b6:	f04f 0000 	mov.w	r0, #0
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	0159      	lsls	r1, r3, #5
 80023c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c4:	0150      	lsls	r0, r2, #5
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4621      	mov	r1, r4
 80023cc:	1a51      	subs	r1, r2, r1
 80023ce:	6139      	str	r1, [r7, #16]
 80023d0:	4629      	mov	r1, r5
 80023d2:	eb63 0301 	sbc.w	r3, r3, r1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023e4:	4659      	mov	r1, fp
 80023e6:	018b      	lsls	r3, r1, #6
 80023e8:	4651      	mov	r1, sl
 80023ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ee:	4651      	mov	r1, sl
 80023f0:	018a      	lsls	r2, r1, #6
 80023f2:	4651      	mov	r1, sl
 80023f4:	ebb2 0801 	subs.w	r8, r2, r1
 80023f8:	4659      	mov	r1, fp
 80023fa:	eb63 0901 	sbc.w	r9, r3, r1
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800240e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002412:	4690      	mov	r8, r2
 8002414:	4699      	mov	r9, r3
 8002416:	4623      	mov	r3, r4
 8002418:	eb18 0303 	adds.w	r3, r8, r3
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	462b      	mov	r3, r5
 8002420:	eb49 0303 	adc.w	r3, r9, r3
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002432:	4629      	mov	r1, r5
 8002434:	024b      	lsls	r3, r1, #9
 8002436:	4621      	mov	r1, r4
 8002438:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800243c:	4621      	mov	r1, r4
 800243e:	024a      	lsls	r2, r1, #9
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002446:	2200      	movs	r2, #0
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
 800244a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800244c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002450:	f7fd ff1e 	bl	8000290 <__aeabi_uldivmod>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4613      	mov	r3, r2
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800245c:	e058      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245e:	4b38      	ldr	r3, [pc, #224]	; (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	2200      	movs	r2, #0
 8002466:	4618      	mov	r0, r3
 8002468:	4611      	mov	r1, r2
 800246a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800246e:	623b      	str	r3, [r7, #32]
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
 8002474:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002478:	4642      	mov	r2, r8
 800247a:	464b      	mov	r3, r9
 800247c:	f04f 0000 	mov.w	r0, #0
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	0159      	lsls	r1, r3, #5
 8002486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800248a:	0150      	lsls	r0, r2, #5
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4641      	mov	r1, r8
 8002492:	ebb2 0a01 	subs.w	sl, r2, r1
 8002496:	4649      	mov	r1, r9
 8002498:	eb63 0b01 	sbc.w	fp, r3, r1
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024b0:	ebb2 040a 	subs.w	r4, r2, sl
 80024b4:	eb63 050b 	sbc.w	r5, r3, fp
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	00eb      	lsls	r3, r5, #3
 80024c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024c6:	00e2      	lsls	r2, r4, #3
 80024c8:	4614      	mov	r4, r2
 80024ca:	461d      	mov	r5, r3
 80024cc:	4643      	mov	r3, r8
 80024ce:	18e3      	adds	r3, r4, r3
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	464b      	mov	r3, r9
 80024d4:	eb45 0303 	adc.w	r3, r5, r3
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024e6:	4629      	mov	r1, r5
 80024e8:	028b      	lsls	r3, r1, #10
 80024ea:	4621      	mov	r1, r4
 80024ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f0:	4621      	mov	r1, r4
 80024f2:	028a      	lsls	r2, r1, #10
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024fa:	2200      	movs	r2, #0
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	61fa      	str	r2, [r7, #28]
 8002500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002504:	f7fd fec4 	bl	8000290 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4613      	mov	r3, r2
 800250e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	3301      	adds	r3, #1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002520:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800252a:	e002      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_GetSysClockFreq+0x204>)
 800252e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002534:	4618      	mov	r0, r3
 8002536:	3750      	adds	r7, #80	; 0x50
 8002538:	46bd      	mov	sp, r7
 800253a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	00f42400 	.word	0x00f42400
 8002548:	007a1200 	.word	0x007a1200

0800254c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_RCC_GetHCLKFreq+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	2000000c 	.word	0x2000000c

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002568:	f7ff fff0 	bl	800254c <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0a9b      	lsrs	r3, r3, #10
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	08004060 	.word	0x08004060

0800258c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002590:	f7ff ffdc 	bl	800254c <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0b5b      	lsrs	r3, r3, #13
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4903      	ldr	r1, [pc, #12]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40023800 	.word	0x40023800
 80025b0:	08004060 	.word	0x08004060

080025b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e03f      	b.n	8002646 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fb12 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2224      	movs	r2, #36	; 0x24
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fd23 	bl	8003044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800260c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800261c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800262c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	4613      	mov	r3, r2
 800265a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b20      	cmp	r3, #32
 8002666:	d130      	bne.n	80026ca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_UART_Transmit_IT+0x26>
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e029      	b.n	80026cc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_UART_Transmit_IT+0x38>
 8002682:	2302      	movs	r3, #2
 8002684:	e022      	b.n	80026cc <HAL_UART_Transmit_IT+0x7e>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	88fa      	ldrh	r2, [r7, #6]
 800269e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2221      	movs	r2, #33	; 0x21
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026c4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
  }
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d11d      	bne.n	800272e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_UART_Receive_IT+0x26>
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e016      	b.n	8002730 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_UART_Receive_IT+0x38>
 800270c:	2302      	movs	r3, #2
 800270e:	e00f      	b.n	8002730 <HAL_UART_Receive_IT+0x58>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	461a      	mov	r2, r3
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fab5 	bl	8002c94 <UART_Start_Receive_IT>
 800272a:	4603      	mov	r3, r0
 800272c:	e000      	b.n	8002730 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
  }
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b0ba      	sub	sp, #232	; 0xe8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800276a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_UART_IRQHandler+0x66>
 800278a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fb99 	bl	8002ece <UART_Receive_IT>
      return;
 800279c:	e256      	b.n	8002c4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800279e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 80de 	beq.w	8002964 <HAL_UART_IRQHandler+0x22c>
 80027a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80d1 	beq.w	8002964 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <HAL_UART_IRQHandler+0xae>
 80027ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_UART_IRQHandler+0xd2>
 80027f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f043 0202 	orr.w	r2, r3, #2
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800280a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_UART_IRQHandler+0xf6>
 8002816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0204 	orr.w	r2, r3, #4
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800282e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d011      	beq.n	800285e <HAL_UART_IRQHandler+0x126>
 800283a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f043 0208 	orr.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 81ed 	beq.w	8002c42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_UART_IRQHandler+0x14e>
 8002874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fb24 	bl	8002ece <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <HAL_UART_IRQHandler+0x17a>
 80028aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d04f      	beq.n	8002952 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fa2c 	bl	8002d10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d141      	bne.n	800294a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	3314      	adds	r3, #20
 80028cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028d4:	e853 3f00 	ldrex	r3, [r3]
 80028d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3314      	adds	r3, #20
 80028ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800290a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1d9      	bne.n	80028c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	2b00      	cmp	r3, #0
 8002918:	d013      	beq.n	8002942 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	4a7d      	ldr	r2, [pc, #500]	; (8002b14 <HAL_UART_IRQHandler+0x3dc>)
 8002920:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fd7e 	bl	8001428 <HAL_DMA_Abort_IT>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800293c:	4610      	mov	r0, r2
 800293e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002940:	e00e      	b.n	8002960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f990 	bl	8002c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002948:	e00a      	b.n	8002960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f98c 	bl	8002c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002950:	e006      	b.n	8002960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f988 	bl	8002c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800295e:	e170      	b.n	8002c42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002960:	bf00      	nop
    return;
 8002962:	e16e      	b.n	8002c42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	2b01      	cmp	r3, #1
 800296a:	f040 814a 	bne.w	8002c02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8143 	beq.w	8002c02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800297c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 813c 	beq.w	8002c02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	f040 80b4 	bne.w	8002b18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8140 	beq.w	8002c46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029ce:	429a      	cmp	r2, r3
 80029d0:	f080 8139 	bcs.w	8002c46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e6:	f000 8088 	beq.w	8002afa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a26:	e841 2300 	strex	r3, r2, [r1]
 8002a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1d9      	bne.n	80029ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3314      	adds	r3, #20
 8002a3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3314      	adds	r3, #20
 8002a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e1      	bne.n	8002a36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3314      	adds	r3, #20
 8002a78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a7c:	e853 3f00 	ldrex	r3, [r3]
 8002a80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3314      	adds	r3, #20
 8002a92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a9e:	e841 2300 	strex	r3, r2, [r1]
 8002aa2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1e3      	bne.n	8002a72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	330c      	adds	r3, #12
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac2:	e853 3f00 	ldrex	r3, [r3]
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aca:	f023 0310 	bic.w	r3, r3, #16
 8002ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002adc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ade:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ae4:	e841 2300 	strex	r3, r2, [r1]
 8002ae8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e3      	bne.n	8002ab8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe fc27 	bl	8001348 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f8b6 	bl	8002c7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b10:	e099      	b.n	8002c46 <HAL_UART_IRQHandler+0x50e>
 8002b12:	bf00      	nop
 8002b14:	08002dd7 	.word	0x08002dd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 808b 	beq.w	8002c4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8086 	beq.w	8002c4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	330c      	adds	r3, #12
 8002b44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b48:	e853 3f00 	ldrex	r3, [r3]
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b62:	647a      	str	r2, [r7, #68]	; 0x44
 8002b64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b6a:	e841 2300 	strex	r3, r2, [r1]
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1e3      	bne.n	8002b3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3314      	adds	r3, #20
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	e853 3f00 	ldrex	r3, [r3]
 8002b84:	623b      	str	r3, [r7, #32]
   return(result);
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3314      	adds	r3, #20
 8002b96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b9a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba2:	e841 2300 	strex	r3, r2, [r1]
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1e3      	bne.n	8002b76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	e853 3f00 	ldrex	r3, [r3]
 8002bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0310 	bic.w	r3, r3, #16
 8002bd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002be0:	61fa      	str	r2, [r7, #28]
 8002be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	69b9      	ldr	r1, [r7, #24]
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	e841 2300 	strex	r3, r2, [r1]
 8002bec:	617b      	str	r3, [r7, #20]
   return(result);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e3      	bne.n	8002bbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f83e 	bl	8002c7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c00:	e023      	b.n	8002c4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_UART_IRQHandler+0x4ea>
 8002c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8ef 	bl	8002dfe <UART_Transmit_IT>
    return;
 8002c20:	e014      	b.n	8002c4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00e      	beq.n	8002c4c <HAL_UART_IRQHandler+0x514>
 8002c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f92f 	bl	8002e9e <UART_EndTransmit_IT>
    return;
 8002c40:	e004      	b.n	8002c4c <HAL_UART_IRQHandler+0x514>
    return;
 8002c42:	bf00      	nop
 8002c44:	e002      	b.n	8002c4c <HAL_UART_IRQHandler+0x514>
      return;
 8002c46:	bf00      	nop
 8002c48:	e000      	b.n	8002c4c <HAL_UART_IRQHandler+0x514>
      return;
 8002c4a:	bf00      	nop
  }
}
 8002c4c:	37e8      	adds	r7, #232	; 0xe8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop

08002c54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2222      	movs	r2, #34	; 0x22
 8002cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0201 	orr.w	r2, r2, #1
 8002cf0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0220 	orr.w	r2, r2, #32
 8002d00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b095      	sub	sp, #84	; 0x54
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d38:	643a      	str	r2, [r7, #64]	; 0x40
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e5      	bne.n	8002d18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3314      	adds	r3, #20
 8002d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	e853 3f00 	ldrex	r3, [r3]
 8002d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3314      	adds	r3, #20
 8002d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e5      	bne.n	8002d4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d119      	bne.n	8002dbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f023 0310 	bic.w	r3, r3, #16
 8002d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002da8:	61ba      	str	r2, [r7, #24]
 8002daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6979      	ldr	r1, [r7, #20]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	613b      	str	r3, [r7, #16]
   return(result);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dca:	bf00      	nop
 8002dcc:	3754      	adds	r7, #84	; 0x54
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff ff39 	bl	8002c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b085      	sub	sp, #20
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b21      	cmp	r3, #33	; 0x21
 8002e10:	d13e      	bne.n	8002e90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1a:	d114      	bne.n	8002e46 <UART_Transmit_IT+0x48>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d110      	bne.n	8002e46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	1c9a      	adds	r2, r3, #2
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	621a      	str	r2, [r3, #32]
 8002e44:	e008      	b.n	8002e58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	1c59      	adds	r1, r3, #1
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6211      	str	r1, [r2, #32]
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4619      	mov	r1, r3
 8002e66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10f      	bne.n	8002e8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e000      	b.n	8002e92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
  }
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff fec8 	bl	8002c54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b08c      	sub	sp, #48	; 0x30
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b22      	cmp	r3, #34	; 0x22
 8002ee0:	f040 80ab 	bne.w	800303a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eec:	d117      	bne.n	8002f1e <UART_Receive_IT+0x50>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d113      	bne.n	8002f1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	1c9a      	adds	r2, r3, #2
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f1c:	e026      	b.n	8002f6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f30:	d007      	beq.n	8002f42 <UART_Receive_IT+0x74>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <UART_Receive_IT+0x82>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e008      	b.n	8002f62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d15a      	bne.n	8003036 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0220 	bic.w	r2, r2, #32
 8002f8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d135      	bne.n	800302c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	330c      	adds	r3, #12
 8002fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f023 0310 	bic.w	r3, r3, #16
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	623a      	str	r2, [r7, #32]
 8002fe8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fea:	69f9      	ldr	r1, [r7, #28]
 8002fec:	6a3a      	ldr	r2, [r7, #32]
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e5      	bne.n	8002fc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b10      	cmp	r3, #16
 8003006:	d10a      	bne.n	800301e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff fe29 	bl	8002c7c <HAL_UARTEx_RxEventCallback>
 800302a:	e002      	b.n	8003032 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7fd fc95 	bl	800095c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e002      	b.n	800303c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800303a:	2302      	movs	r3, #2
  }
}
 800303c:	4618      	mov	r0, r3
 800303e:	3730      	adds	r7, #48	; 0x30
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003048:	b0c0      	sub	sp, #256	; 0x100
 800304a:	af00      	add	r7, sp, #0
 800304c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003060:	68d9      	ldr	r1, [r3, #12]
 8003062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	ea40 0301 	orr.w	r3, r0, r1
 800306c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	431a      	orrs	r2, r3
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	431a      	orrs	r2, r3
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800309c:	f021 010c 	bic.w	r1, r1, #12
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030aa:	430b      	orrs	r3, r1
 80030ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030be:	6999      	ldr	r1, [r3, #24]
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	ea40 0301 	orr.w	r3, r0, r1
 80030ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4b8f      	ldr	r3, [pc, #572]	; (8003310 <UART_SetConfig+0x2cc>)
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d005      	beq.n	80030e4 <UART_SetConfig+0xa0>
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b8d      	ldr	r3, [pc, #564]	; (8003314 <UART_SetConfig+0x2d0>)
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d104      	bne.n	80030ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030e4:	f7ff fa52 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 80030e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030ec:	e003      	b.n	80030f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030ee:	f7ff fa39 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 80030f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003100:	f040 810c 	bne.w	800331c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003108:	2200      	movs	r2, #0
 800310a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800310e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003116:	4622      	mov	r2, r4
 8003118:	462b      	mov	r3, r5
 800311a:	1891      	adds	r1, r2, r2
 800311c:	65b9      	str	r1, [r7, #88]	; 0x58
 800311e:	415b      	adcs	r3, r3
 8003120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003126:	4621      	mov	r1, r4
 8003128:	eb12 0801 	adds.w	r8, r2, r1
 800312c:	4629      	mov	r1, r5
 800312e:	eb43 0901 	adc.w	r9, r3, r1
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800313e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003146:	4690      	mov	r8, r2
 8003148:	4699      	mov	r9, r3
 800314a:	4623      	mov	r3, r4
 800314c:	eb18 0303 	adds.w	r3, r8, r3
 8003150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003154:	462b      	mov	r3, r5
 8003156:	eb49 0303 	adc.w	r3, r9, r3
 800315a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800316a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800316e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003172:	460b      	mov	r3, r1
 8003174:	18db      	adds	r3, r3, r3
 8003176:	653b      	str	r3, [r7, #80]	; 0x50
 8003178:	4613      	mov	r3, r2
 800317a:	eb42 0303 	adc.w	r3, r2, r3
 800317e:	657b      	str	r3, [r7, #84]	; 0x54
 8003180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003188:	f7fd f882 	bl	8000290 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4b61      	ldr	r3, [pc, #388]	; (8003318 <UART_SetConfig+0x2d4>)
 8003192:	fba3 2302 	umull	r2, r3, r3, r2
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	011c      	lsls	r4, r3, #4
 800319a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031ac:	4642      	mov	r2, r8
 80031ae:	464b      	mov	r3, r9
 80031b0:	1891      	adds	r1, r2, r2
 80031b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80031b4:	415b      	adcs	r3, r3
 80031b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031bc:	4641      	mov	r1, r8
 80031be:	eb12 0a01 	adds.w	sl, r2, r1
 80031c2:	4649      	mov	r1, r9
 80031c4:	eb43 0b01 	adc.w	fp, r3, r1
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031dc:	4692      	mov	sl, r2
 80031de:	469b      	mov	fp, r3
 80031e0:	4643      	mov	r3, r8
 80031e2:	eb1a 0303 	adds.w	r3, sl, r3
 80031e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031ea:	464b      	mov	r3, r9
 80031ec:	eb4b 0303 	adc.w	r3, fp, r3
 80031f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003200:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003208:	460b      	mov	r3, r1
 800320a:	18db      	adds	r3, r3, r3
 800320c:	643b      	str	r3, [r7, #64]	; 0x40
 800320e:	4613      	mov	r3, r2
 8003210:	eb42 0303 	adc.w	r3, r2, r3
 8003214:	647b      	str	r3, [r7, #68]	; 0x44
 8003216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800321a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800321e:	f7fd f837 	bl	8000290 <__aeabi_uldivmod>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4611      	mov	r1, r2
 8003228:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <UART_SetConfig+0x2d4>)
 800322a:	fba3 2301 	umull	r2, r3, r3, r1
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2264      	movs	r2, #100	; 0x64
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	1acb      	subs	r3, r1, r3
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800323e:	4b36      	ldr	r3, [pc, #216]	; (8003318 <UART_SetConfig+0x2d4>)
 8003240:	fba3 2302 	umull	r2, r3, r3, r2
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800324c:	441c      	add	r4, r3
 800324e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003252:	2200      	movs	r2, #0
 8003254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003258:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800325c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	1891      	adds	r1, r2, r2
 8003266:	63b9      	str	r1, [r7, #56]	; 0x38
 8003268:	415b      	adcs	r3, r3
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800326c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003270:	4641      	mov	r1, r8
 8003272:	1851      	adds	r1, r2, r1
 8003274:	6339      	str	r1, [r7, #48]	; 0x30
 8003276:	4649      	mov	r1, r9
 8003278:	414b      	adcs	r3, r1
 800327a:	637b      	str	r3, [r7, #52]	; 0x34
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003288:	4659      	mov	r1, fp
 800328a:	00cb      	lsls	r3, r1, #3
 800328c:	4651      	mov	r1, sl
 800328e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003292:	4651      	mov	r1, sl
 8003294:	00ca      	lsls	r2, r1, #3
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	4603      	mov	r3, r0
 800329c:	4642      	mov	r2, r8
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032a4:	464b      	mov	r3, r9
 80032a6:	460a      	mov	r2, r1
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032c4:	460b      	mov	r3, r1
 80032c6:	18db      	adds	r3, r3, r3
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ca:	4613      	mov	r3, r2
 80032cc:	eb42 0303 	adc.w	r3, r2, r3
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032da:	f7fc ffd9 	bl	8000290 <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <UART_SetConfig+0x2d4>)
 80032e4:	fba3 1302 	umull	r1, r3, r3, r2
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	2164      	movs	r1, #100	; 0x64
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	3332      	adds	r3, #50	; 0x32
 80032f6:	4a08      	ldr	r2, [pc, #32]	; (8003318 <UART_SetConfig+0x2d4>)
 80032f8:	fba2 2303 	umull	r2, r3, r2, r3
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	f003 0207 	and.w	r2, r3, #7
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4422      	add	r2, r4
 800330a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800330c:	e105      	b.n	800351a <UART_SetConfig+0x4d6>
 800330e:	bf00      	nop
 8003310:	40011000 	.word	0x40011000
 8003314:	40011400 	.word	0x40011400
 8003318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800331c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003320:	2200      	movs	r2, #0
 8003322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003326:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800332a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800332e:	4642      	mov	r2, r8
 8003330:	464b      	mov	r3, r9
 8003332:	1891      	adds	r1, r2, r2
 8003334:	6239      	str	r1, [r7, #32]
 8003336:	415b      	adcs	r3, r3
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
 800333a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800333e:	4641      	mov	r1, r8
 8003340:	1854      	adds	r4, r2, r1
 8003342:	4649      	mov	r1, r9
 8003344:	eb43 0501 	adc.w	r5, r3, r1
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	00eb      	lsls	r3, r5, #3
 8003352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003356:	00e2      	lsls	r2, r4, #3
 8003358:	4614      	mov	r4, r2
 800335a:	461d      	mov	r5, r3
 800335c:	4643      	mov	r3, r8
 800335e:	18e3      	adds	r3, r4, r3
 8003360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003364:	464b      	mov	r3, r9
 8003366:	eb45 0303 	adc.w	r3, r5, r3
 800336a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800337a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800338a:	4629      	mov	r1, r5
 800338c:	008b      	lsls	r3, r1, #2
 800338e:	4621      	mov	r1, r4
 8003390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003394:	4621      	mov	r1, r4
 8003396:	008a      	lsls	r2, r1, #2
 8003398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800339c:	f7fc ff78 	bl	8000290 <__aeabi_uldivmod>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4b60      	ldr	r3, [pc, #384]	; (8003528 <UART_SetConfig+0x4e4>)
 80033a6:	fba3 2302 	umull	r2, r3, r3, r2
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	011c      	lsls	r4, r3, #4
 80033ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033b2:	2200      	movs	r2, #0
 80033b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033c0:	4642      	mov	r2, r8
 80033c2:	464b      	mov	r3, r9
 80033c4:	1891      	adds	r1, r2, r2
 80033c6:	61b9      	str	r1, [r7, #24]
 80033c8:	415b      	adcs	r3, r3
 80033ca:	61fb      	str	r3, [r7, #28]
 80033cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d0:	4641      	mov	r1, r8
 80033d2:	1851      	adds	r1, r2, r1
 80033d4:	6139      	str	r1, [r7, #16]
 80033d6:	4649      	mov	r1, r9
 80033d8:	414b      	adcs	r3, r1
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033e8:	4659      	mov	r1, fp
 80033ea:	00cb      	lsls	r3, r1, #3
 80033ec:	4651      	mov	r1, sl
 80033ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033f2:	4651      	mov	r1, sl
 80033f4:	00ca      	lsls	r2, r1, #3
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	4642      	mov	r2, r8
 80033fe:	189b      	adds	r3, r3, r2
 8003400:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003404:	464b      	mov	r3, r9
 8003406:	460a      	mov	r2, r1
 8003408:	eb42 0303 	adc.w	r3, r2, r3
 800340c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	67bb      	str	r3, [r7, #120]	; 0x78
 800341a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003428:	4649      	mov	r1, r9
 800342a:	008b      	lsls	r3, r1, #2
 800342c:	4641      	mov	r1, r8
 800342e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003432:	4641      	mov	r1, r8
 8003434:	008a      	lsls	r2, r1, #2
 8003436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800343a:	f7fc ff29 	bl	8000290 <__aeabi_uldivmod>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4b39      	ldr	r3, [pc, #228]	; (8003528 <UART_SetConfig+0x4e4>)
 8003444:	fba3 1302 	umull	r1, r3, r3, r2
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	2164      	movs	r1, #100	; 0x64
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	3332      	adds	r3, #50	; 0x32
 8003456:	4a34      	ldr	r2, [pc, #208]	; (8003528 <UART_SetConfig+0x4e4>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003462:	441c      	add	r4, r3
 8003464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003468:	2200      	movs	r2, #0
 800346a:	673b      	str	r3, [r7, #112]	; 0x70
 800346c:	677a      	str	r2, [r7, #116]	; 0x74
 800346e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003472:	4642      	mov	r2, r8
 8003474:	464b      	mov	r3, r9
 8003476:	1891      	adds	r1, r2, r2
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	415b      	adcs	r3, r3
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003482:	4641      	mov	r1, r8
 8003484:	1851      	adds	r1, r2, r1
 8003486:	6039      	str	r1, [r7, #0]
 8003488:	4649      	mov	r1, r9
 800348a:	414b      	adcs	r3, r1
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800349a:	4659      	mov	r1, fp
 800349c:	00cb      	lsls	r3, r1, #3
 800349e:	4651      	mov	r1, sl
 80034a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034a4:	4651      	mov	r1, sl
 80034a6:	00ca      	lsls	r2, r1, #3
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	4603      	mov	r3, r0
 80034ae:	4642      	mov	r2, r8
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80034b4:	464b      	mov	r3, r9
 80034b6:	460a      	mov	r2, r1
 80034b8:	eb42 0303 	adc.w	r3, r2, r3
 80034bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	663b      	str	r3, [r7, #96]	; 0x60
 80034c8:	667a      	str	r2, [r7, #100]	; 0x64
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034d6:	4649      	mov	r1, r9
 80034d8:	008b      	lsls	r3, r1, #2
 80034da:	4641      	mov	r1, r8
 80034dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034e0:	4641      	mov	r1, r8
 80034e2:	008a      	lsls	r2, r1, #2
 80034e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034e8:	f7fc fed2 	bl	8000290 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <UART_SetConfig+0x4e4>)
 80034f2:	fba3 1302 	umull	r1, r3, r3, r2
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2164      	movs	r1, #100	; 0x64
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	3332      	adds	r3, #50	; 0x32
 8003504:	4a08      	ldr	r2, [pc, #32]	; (8003528 <UART_SetConfig+0x4e4>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	f003 020f 	and.w	r2, r3, #15
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4422      	add	r2, r4
 8003518:	609a      	str	r2, [r3, #8]
}
 800351a:	bf00      	nop
 800351c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003520:	46bd      	mov	sp, r7
 8003522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003526:	bf00      	nop
 8003528:	51eb851f 	.word	0x51eb851f

0800352c <__errno>:
 800352c:	4b01      	ldr	r3, [pc, #4]	; (8003534 <__errno+0x8>)
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000018 	.word	0x20000018

08003538 <__libc_init_array>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	4d0d      	ldr	r5, [pc, #52]	; (8003570 <__libc_init_array+0x38>)
 800353c:	4c0d      	ldr	r4, [pc, #52]	; (8003574 <__libc_init_array+0x3c>)
 800353e:	1b64      	subs	r4, r4, r5
 8003540:	10a4      	asrs	r4, r4, #2
 8003542:	2600      	movs	r6, #0
 8003544:	42a6      	cmp	r6, r4
 8003546:	d109      	bne.n	800355c <__libc_init_array+0x24>
 8003548:	4d0b      	ldr	r5, [pc, #44]	; (8003578 <__libc_init_array+0x40>)
 800354a:	4c0c      	ldr	r4, [pc, #48]	; (800357c <__libc_init_array+0x44>)
 800354c:	f000 fc8e 	bl	8003e6c <_init>
 8003550:	1b64      	subs	r4, r4, r5
 8003552:	10a4      	asrs	r4, r4, #2
 8003554:	2600      	movs	r6, #0
 8003556:	42a6      	cmp	r6, r4
 8003558:	d105      	bne.n	8003566 <__libc_init_array+0x2e>
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003560:	4798      	blx	r3
 8003562:	3601      	adds	r6, #1
 8003564:	e7ee      	b.n	8003544 <__libc_init_array+0xc>
 8003566:	f855 3b04 	ldr.w	r3, [r5], #4
 800356a:	4798      	blx	r3
 800356c:	3601      	adds	r6, #1
 800356e:	e7f2      	b.n	8003556 <__libc_init_array+0x1e>
 8003570:	080040ac 	.word	0x080040ac
 8003574:	080040ac 	.word	0x080040ac
 8003578:	080040ac 	.word	0x080040ac
 800357c:	080040b0 	.word	0x080040b0

08003580 <memset>:
 8003580:	4402      	add	r2, r0
 8003582:	4603      	mov	r3, r0
 8003584:	4293      	cmp	r3, r2
 8003586:	d100      	bne.n	800358a <memset+0xa>
 8003588:	4770      	bx	lr
 800358a:	f803 1b01 	strb.w	r1, [r3], #1
 800358e:	e7f9      	b.n	8003584 <memset+0x4>

08003590 <siprintf>:
 8003590:	b40e      	push	{r1, r2, r3}
 8003592:	b500      	push	{lr}
 8003594:	b09c      	sub	sp, #112	; 0x70
 8003596:	ab1d      	add	r3, sp, #116	; 0x74
 8003598:	9002      	str	r0, [sp, #8]
 800359a:	9006      	str	r0, [sp, #24]
 800359c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035a0:	4809      	ldr	r0, [pc, #36]	; (80035c8 <siprintf+0x38>)
 80035a2:	9107      	str	r1, [sp, #28]
 80035a4:	9104      	str	r1, [sp, #16]
 80035a6:	4909      	ldr	r1, [pc, #36]	; (80035cc <siprintf+0x3c>)
 80035a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80035ac:	9105      	str	r1, [sp, #20]
 80035ae:	6800      	ldr	r0, [r0, #0]
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	a902      	add	r1, sp, #8
 80035b4:	f000 f868 	bl	8003688 <_svfiprintf_r>
 80035b8:	9b02      	ldr	r3, [sp, #8]
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	b01c      	add	sp, #112	; 0x70
 80035c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80035c4:	b003      	add	sp, #12
 80035c6:	4770      	bx	lr
 80035c8:	20000018 	.word	0x20000018
 80035cc:	ffff0208 	.word	0xffff0208

080035d0 <__ssputs_r>:
 80035d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d4:	688e      	ldr	r6, [r1, #8]
 80035d6:	429e      	cmp	r6, r3
 80035d8:	4682      	mov	sl, r0
 80035da:	460c      	mov	r4, r1
 80035dc:	4690      	mov	r8, r2
 80035de:	461f      	mov	r7, r3
 80035e0:	d838      	bhi.n	8003654 <__ssputs_r+0x84>
 80035e2:	898a      	ldrh	r2, [r1, #12]
 80035e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035e8:	d032      	beq.n	8003650 <__ssputs_r+0x80>
 80035ea:	6825      	ldr	r5, [r4, #0]
 80035ec:	6909      	ldr	r1, [r1, #16]
 80035ee:	eba5 0901 	sub.w	r9, r5, r1
 80035f2:	6965      	ldr	r5, [r4, #20]
 80035f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035fc:	3301      	adds	r3, #1
 80035fe:	444b      	add	r3, r9
 8003600:	106d      	asrs	r5, r5, #1
 8003602:	429d      	cmp	r5, r3
 8003604:	bf38      	it	cc
 8003606:	461d      	movcc	r5, r3
 8003608:	0553      	lsls	r3, r2, #21
 800360a:	d531      	bpl.n	8003670 <__ssputs_r+0xa0>
 800360c:	4629      	mov	r1, r5
 800360e:	f000 fb63 	bl	8003cd8 <_malloc_r>
 8003612:	4606      	mov	r6, r0
 8003614:	b950      	cbnz	r0, 800362c <__ssputs_r+0x5c>
 8003616:	230c      	movs	r3, #12
 8003618:	f8ca 3000 	str.w	r3, [sl]
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003622:	81a3      	strh	r3, [r4, #12]
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362c:	6921      	ldr	r1, [r4, #16]
 800362e:	464a      	mov	r2, r9
 8003630:	f000 fabe 	bl	8003bb0 <memcpy>
 8003634:	89a3      	ldrh	r3, [r4, #12]
 8003636:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800363a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800363e:	81a3      	strh	r3, [r4, #12]
 8003640:	6126      	str	r6, [r4, #16]
 8003642:	6165      	str	r5, [r4, #20]
 8003644:	444e      	add	r6, r9
 8003646:	eba5 0509 	sub.w	r5, r5, r9
 800364a:	6026      	str	r6, [r4, #0]
 800364c:	60a5      	str	r5, [r4, #8]
 800364e:	463e      	mov	r6, r7
 8003650:	42be      	cmp	r6, r7
 8003652:	d900      	bls.n	8003656 <__ssputs_r+0x86>
 8003654:	463e      	mov	r6, r7
 8003656:	6820      	ldr	r0, [r4, #0]
 8003658:	4632      	mov	r2, r6
 800365a:	4641      	mov	r1, r8
 800365c:	f000 fab6 	bl	8003bcc <memmove>
 8003660:	68a3      	ldr	r3, [r4, #8]
 8003662:	1b9b      	subs	r3, r3, r6
 8003664:	60a3      	str	r3, [r4, #8]
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	4433      	add	r3, r6
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	2000      	movs	r0, #0
 800366e:	e7db      	b.n	8003628 <__ssputs_r+0x58>
 8003670:	462a      	mov	r2, r5
 8003672:	f000 fba5 	bl	8003dc0 <_realloc_r>
 8003676:	4606      	mov	r6, r0
 8003678:	2800      	cmp	r0, #0
 800367a:	d1e1      	bne.n	8003640 <__ssputs_r+0x70>
 800367c:	6921      	ldr	r1, [r4, #16]
 800367e:	4650      	mov	r0, sl
 8003680:	f000 fabe 	bl	8003c00 <_free_r>
 8003684:	e7c7      	b.n	8003616 <__ssputs_r+0x46>
	...

08003688 <_svfiprintf_r>:
 8003688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368c:	4698      	mov	r8, r3
 800368e:	898b      	ldrh	r3, [r1, #12]
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	b09d      	sub	sp, #116	; 0x74
 8003694:	4607      	mov	r7, r0
 8003696:	460d      	mov	r5, r1
 8003698:	4614      	mov	r4, r2
 800369a:	d50e      	bpl.n	80036ba <_svfiprintf_r+0x32>
 800369c:	690b      	ldr	r3, [r1, #16]
 800369e:	b963      	cbnz	r3, 80036ba <_svfiprintf_r+0x32>
 80036a0:	2140      	movs	r1, #64	; 0x40
 80036a2:	f000 fb19 	bl	8003cd8 <_malloc_r>
 80036a6:	6028      	str	r0, [r5, #0]
 80036a8:	6128      	str	r0, [r5, #16]
 80036aa:	b920      	cbnz	r0, 80036b6 <_svfiprintf_r+0x2e>
 80036ac:	230c      	movs	r3, #12
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	e0d1      	b.n	800385a <_svfiprintf_r+0x1d2>
 80036b6:	2340      	movs	r3, #64	; 0x40
 80036b8:	616b      	str	r3, [r5, #20]
 80036ba:	2300      	movs	r3, #0
 80036bc:	9309      	str	r3, [sp, #36]	; 0x24
 80036be:	2320      	movs	r3, #32
 80036c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80036c8:	2330      	movs	r3, #48	; 0x30
 80036ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003874 <_svfiprintf_r+0x1ec>
 80036ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036d2:	f04f 0901 	mov.w	r9, #1
 80036d6:	4623      	mov	r3, r4
 80036d8:	469a      	mov	sl, r3
 80036da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036de:	b10a      	cbz	r2, 80036e4 <_svfiprintf_r+0x5c>
 80036e0:	2a25      	cmp	r2, #37	; 0x25
 80036e2:	d1f9      	bne.n	80036d8 <_svfiprintf_r+0x50>
 80036e4:	ebba 0b04 	subs.w	fp, sl, r4
 80036e8:	d00b      	beq.n	8003702 <_svfiprintf_r+0x7a>
 80036ea:	465b      	mov	r3, fp
 80036ec:	4622      	mov	r2, r4
 80036ee:	4629      	mov	r1, r5
 80036f0:	4638      	mov	r0, r7
 80036f2:	f7ff ff6d 	bl	80035d0 <__ssputs_r>
 80036f6:	3001      	adds	r0, #1
 80036f8:	f000 80aa 	beq.w	8003850 <_svfiprintf_r+0x1c8>
 80036fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036fe:	445a      	add	r2, fp
 8003700:	9209      	str	r2, [sp, #36]	; 0x24
 8003702:	f89a 3000 	ldrb.w	r3, [sl]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80a2 	beq.w	8003850 <_svfiprintf_r+0x1c8>
 800370c:	2300      	movs	r3, #0
 800370e:	f04f 32ff 	mov.w	r2, #4294967295
 8003712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003716:	f10a 0a01 	add.w	sl, sl, #1
 800371a:	9304      	str	r3, [sp, #16]
 800371c:	9307      	str	r3, [sp, #28]
 800371e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003722:	931a      	str	r3, [sp, #104]	; 0x68
 8003724:	4654      	mov	r4, sl
 8003726:	2205      	movs	r2, #5
 8003728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800372c:	4851      	ldr	r0, [pc, #324]	; (8003874 <_svfiprintf_r+0x1ec>)
 800372e:	f7fc fd5f 	bl	80001f0 <memchr>
 8003732:	9a04      	ldr	r2, [sp, #16]
 8003734:	b9d8      	cbnz	r0, 800376e <_svfiprintf_r+0xe6>
 8003736:	06d0      	lsls	r0, r2, #27
 8003738:	bf44      	itt	mi
 800373a:	2320      	movmi	r3, #32
 800373c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003740:	0711      	lsls	r1, r2, #28
 8003742:	bf44      	itt	mi
 8003744:	232b      	movmi	r3, #43	; 0x2b
 8003746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800374a:	f89a 3000 	ldrb.w	r3, [sl]
 800374e:	2b2a      	cmp	r3, #42	; 0x2a
 8003750:	d015      	beq.n	800377e <_svfiprintf_r+0xf6>
 8003752:	9a07      	ldr	r2, [sp, #28]
 8003754:	4654      	mov	r4, sl
 8003756:	2000      	movs	r0, #0
 8003758:	f04f 0c0a 	mov.w	ip, #10
 800375c:	4621      	mov	r1, r4
 800375e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003762:	3b30      	subs	r3, #48	; 0x30
 8003764:	2b09      	cmp	r3, #9
 8003766:	d94e      	bls.n	8003806 <_svfiprintf_r+0x17e>
 8003768:	b1b0      	cbz	r0, 8003798 <_svfiprintf_r+0x110>
 800376a:	9207      	str	r2, [sp, #28]
 800376c:	e014      	b.n	8003798 <_svfiprintf_r+0x110>
 800376e:	eba0 0308 	sub.w	r3, r0, r8
 8003772:	fa09 f303 	lsl.w	r3, r9, r3
 8003776:	4313      	orrs	r3, r2
 8003778:	9304      	str	r3, [sp, #16]
 800377a:	46a2      	mov	sl, r4
 800377c:	e7d2      	b.n	8003724 <_svfiprintf_r+0x9c>
 800377e:	9b03      	ldr	r3, [sp, #12]
 8003780:	1d19      	adds	r1, r3, #4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	9103      	str	r1, [sp, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	bfbb      	ittet	lt
 800378a:	425b      	neglt	r3, r3
 800378c:	f042 0202 	orrlt.w	r2, r2, #2
 8003790:	9307      	strge	r3, [sp, #28]
 8003792:	9307      	strlt	r3, [sp, #28]
 8003794:	bfb8      	it	lt
 8003796:	9204      	strlt	r2, [sp, #16]
 8003798:	7823      	ldrb	r3, [r4, #0]
 800379a:	2b2e      	cmp	r3, #46	; 0x2e
 800379c:	d10c      	bne.n	80037b8 <_svfiprintf_r+0x130>
 800379e:	7863      	ldrb	r3, [r4, #1]
 80037a0:	2b2a      	cmp	r3, #42	; 0x2a
 80037a2:	d135      	bne.n	8003810 <_svfiprintf_r+0x188>
 80037a4:	9b03      	ldr	r3, [sp, #12]
 80037a6:	1d1a      	adds	r2, r3, #4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	9203      	str	r2, [sp, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bfb8      	it	lt
 80037b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80037b4:	3402      	adds	r4, #2
 80037b6:	9305      	str	r3, [sp, #20]
 80037b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003884 <_svfiprintf_r+0x1fc>
 80037bc:	7821      	ldrb	r1, [r4, #0]
 80037be:	2203      	movs	r2, #3
 80037c0:	4650      	mov	r0, sl
 80037c2:	f7fc fd15 	bl	80001f0 <memchr>
 80037c6:	b140      	cbz	r0, 80037da <_svfiprintf_r+0x152>
 80037c8:	2340      	movs	r3, #64	; 0x40
 80037ca:	eba0 000a 	sub.w	r0, r0, sl
 80037ce:	fa03 f000 	lsl.w	r0, r3, r0
 80037d2:	9b04      	ldr	r3, [sp, #16]
 80037d4:	4303      	orrs	r3, r0
 80037d6:	3401      	adds	r4, #1
 80037d8:	9304      	str	r3, [sp, #16]
 80037da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037de:	4826      	ldr	r0, [pc, #152]	; (8003878 <_svfiprintf_r+0x1f0>)
 80037e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037e4:	2206      	movs	r2, #6
 80037e6:	f7fc fd03 	bl	80001f0 <memchr>
 80037ea:	2800      	cmp	r0, #0
 80037ec:	d038      	beq.n	8003860 <_svfiprintf_r+0x1d8>
 80037ee:	4b23      	ldr	r3, [pc, #140]	; (800387c <_svfiprintf_r+0x1f4>)
 80037f0:	bb1b      	cbnz	r3, 800383a <_svfiprintf_r+0x1b2>
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	3307      	adds	r3, #7
 80037f6:	f023 0307 	bic.w	r3, r3, #7
 80037fa:	3308      	adds	r3, #8
 80037fc:	9303      	str	r3, [sp, #12]
 80037fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003800:	4433      	add	r3, r6
 8003802:	9309      	str	r3, [sp, #36]	; 0x24
 8003804:	e767      	b.n	80036d6 <_svfiprintf_r+0x4e>
 8003806:	fb0c 3202 	mla	r2, ip, r2, r3
 800380a:	460c      	mov	r4, r1
 800380c:	2001      	movs	r0, #1
 800380e:	e7a5      	b.n	800375c <_svfiprintf_r+0xd4>
 8003810:	2300      	movs	r3, #0
 8003812:	3401      	adds	r4, #1
 8003814:	9305      	str	r3, [sp, #20]
 8003816:	4619      	mov	r1, r3
 8003818:	f04f 0c0a 	mov.w	ip, #10
 800381c:	4620      	mov	r0, r4
 800381e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003822:	3a30      	subs	r2, #48	; 0x30
 8003824:	2a09      	cmp	r2, #9
 8003826:	d903      	bls.n	8003830 <_svfiprintf_r+0x1a8>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0c5      	beq.n	80037b8 <_svfiprintf_r+0x130>
 800382c:	9105      	str	r1, [sp, #20]
 800382e:	e7c3      	b.n	80037b8 <_svfiprintf_r+0x130>
 8003830:	fb0c 2101 	mla	r1, ip, r1, r2
 8003834:	4604      	mov	r4, r0
 8003836:	2301      	movs	r3, #1
 8003838:	e7f0      	b.n	800381c <_svfiprintf_r+0x194>
 800383a:	ab03      	add	r3, sp, #12
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	462a      	mov	r2, r5
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <_svfiprintf_r+0x1f8>)
 8003842:	a904      	add	r1, sp, #16
 8003844:	4638      	mov	r0, r7
 8003846:	f3af 8000 	nop.w
 800384a:	1c42      	adds	r2, r0, #1
 800384c:	4606      	mov	r6, r0
 800384e:	d1d6      	bne.n	80037fe <_svfiprintf_r+0x176>
 8003850:	89ab      	ldrh	r3, [r5, #12]
 8003852:	065b      	lsls	r3, r3, #25
 8003854:	f53f af2c 	bmi.w	80036b0 <_svfiprintf_r+0x28>
 8003858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800385a:	b01d      	add	sp, #116	; 0x74
 800385c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003860:	ab03      	add	r3, sp, #12
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	462a      	mov	r2, r5
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <_svfiprintf_r+0x1f8>)
 8003868:	a904      	add	r1, sp, #16
 800386a:	4638      	mov	r0, r7
 800386c:	f000 f87a 	bl	8003964 <_printf_i>
 8003870:	e7eb      	b.n	800384a <_svfiprintf_r+0x1c2>
 8003872:	bf00      	nop
 8003874:	08004070 	.word	0x08004070
 8003878:	0800407a 	.word	0x0800407a
 800387c:	00000000 	.word	0x00000000
 8003880:	080035d1 	.word	0x080035d1
 8003884:	08004076 	.word	0x08004076

08003888 <_printf_common>:
 8003888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800388c:	4616      	mov	r6, r2
 800388e:	4699      	mov	r9, r3
 8003890:	688a      	ldr	r2, [r1, #8]
 8003892:	690b      	ldr	r3, [r1, #16]
 8003894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003898:	4293      	cmp	r3, r2
 800389a:	bfb8      	it	lt
 800389c:	4613      	movlt	r3, r2
 800389e:	6033      	str	r3, [r6, #0]
 80038a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038a4:	4607      	mov	r7, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	b10a      	cbz	r2, 80038ae <_printf_common+0x26>
 80038aa:	3301      	adds	r3, #1
 80038ac:	6033      	str	r3, [r6, #0]
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	0699      	lsls	r1, r3, #26
 80038b2:	bf42      	ittt	mi
 80038b4:	6833      	ldrmi	r3, [r6, #0]
 80038b6:	3302      	addmi	r3, #2
 80038b8:	6033      	strmi	r3, [r6, #0]
 80038ba:	6825      	ldr	r5, [r4, #0]
 80038bc:	f015 0506 	ands.w	r5, r5, #6
 80038c0:	d106      	bne.n	80038d0 <_printf_common+0x48>
 80038c2:	f104 0a19 	add.w	sl, r4, #25
 80038c6:	68e3      	ldr	r3, [r4, #12]
 80038c8:	6832      	ldr	r2, [r6, #0]
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	42ab      	cmp	r3, r5
 80038ce:	dc26      	bgt.n	800391e <_printf_common+0x96>
 80038d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038d4:	1e13      	subs	r3, r2, #0
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	bf18      	it	ne
 80038da:	2301      	movne	r3, #1
 80038dc:	0692      	lsls	r2, r2, #26
 80038de:	d42b      	bmi.n	8003938 <_printf_common+0xb0>
 80038e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038e4:	4649      	mov	r1, r9
 80038e6:	4638      	mov	r0, r7
 80038e8:	47c0      	blx	r8
 80038ea:	3001      	adds	r0, #1
 80038ec:	d01e      	beq.n	800392c <_printf_common+0xa4>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	68e5      	ldr	r5, [r4, #12]
 80038f2:	6832      	ldr	r2, [r6, #0]
 80038f4:	f003 0306 	and.w	r3, r3, #6
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	bf08      	it	eq
 80038fc:	1aad      	subeq	r5, r5, r2
 80038fe:	68a3      	ldr	r3, [r4, #8]
 8003900:	6922      	ldr	r2, [r4, #16]
 8003902:	bf0c      	ite	eq
 8003904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003908:	2500      	movne	r5, #0
 800390a:	4293      	cmp	r3, r2
 800390c:	bfc4      	itt	gt
 800390e:	1a9b      	subgt	r3, r3, r2
 8003910:	18ed      	addgt	r5, r5, r3
 8003912:	2600      	movs	r6, #0
 8003914:	341a      	adds	r4, #26
 8003916:	42b5      	cmp	r5, r6
 8003918:	d11a      	bne.n	8003950 <_printf_common+0xc8>
 800391a:	2000      	movs	r0, #0
 800391c:	e008      	b.n	8003930 <_printf_common+0xa8>
 800391e:	2301      	movs	r3, #1
 8003920:	4652      	mov	r2, sl
 8003922:	4649      	mov	r1, r9
 8003924:	4638      	mov	r0, r7
 8003926:	47c0      	blx	r8
 8003928:	3001      	adds	r0, #1
 800392a:	d103      	bne.n	8003934 <_printf_common+0xac>
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003934:	3501      	adds	r5, #1
 8003936:	e7c6      	b.n	80038c6 <_printf_common+0x3e>
 8003938:	18e1      	adds	r1, r4, r3
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	2030      	movs	r0, #48	; 0x30
 800393e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003942:	4422      	add	r2, r4
 8003944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800394c:	3302      	adds	r3, #2
 800394e:	e7c7      	b.n	80038e0 <_printf_common+0x58>
 8003950:	2301      	movs	r3, #1
 8003952:	4622      	mov	r2, r4
 8003954:	4649      	mov	r1, r9
 8003956:	4638      	mov	r0, r7
 8003958:	47c0      	blx	r8
 800395a:	3001      	adds	r0, #1
 800395c:	d0e6      	beq.n	800392c <_printf_common+0xa4>
 800395e:	3601      	adds	r6, #1
 8003960:	e7d9      	b.n	8003916 <_printf_common+0x8e>
	...

08003964 <_printf_i>:
 8003964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003968:	7e0f      	ldrb	r7, [r1, #24]
 800396a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800396c:	2f78      	cmp	r7, #120	; 0x78
 800396e:	4691      	mov	r9, r2
 8003970:	4680      	mov	r8, r0
 8003972:	460c      	mov	r4, r1
 8003974:	469a      	mov	sl, r3
 8003976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800397a:	d807      	bhi.n	800398c <_printf_i+0x28>
 800397c:	2f62      	cmp	r7, #98	; 0x62
 800397e:	d80a      	bhi.n	8003996 <_printf_i+0x32>
 8003980:	2f00      	cmp	r7, #0
 8003982:	f000 80d8 	beq.w	8003b36 <_printf_i+0x1d2>
 8003986:	2f58      	cmp	r7, #88	; 0x58
 8003988:	f000 80a3 	beq.w	8003ad2 <_printf_i+0x16e>
 800398c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003994:	e03a      	b.n	8003a0c <_printf_i+0xa8>
 8003996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800399a:	2b15      	cmp	r3, #21
 800399c:	d8f6      	bhi.n	800398c <_printf_i+0x28>
 800399e:	a101      	add	r1, pc, #4	; (adr r1, 80039a4 <_printf_i+0x40>)
 80039a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039a4:	080039fd 	.word	0x080039fd
 80039a8:	08003a11 	.word	0x08003a11
 80039ac:	0800398d 	.word	0x0800398d
 80039b0:	0800398d 	.word	0x0800398d
 80039b4:	0800398d 	.word	0x0800398d
 80039b8:	0800398d 	.word	0x0800398d
 80039bc:	08003a11 	.word	0x08003a11
 80039c0:	0800398d 	.word	0x0800398d
 80039c4:	0800398d 	.word	0x0800398d
 80039c8:	0800398d 	.word	0x0800398d
 80039cc:	0800398d 	.word	0x0800398d
 80039d0:	08003b1d 	.word	0x08003b1d
 80039d4:	08003a41 	.word	0x08003a41
 80039d8:	08003aff 	.word	0x08003aff
 80039dc:	0800398d 	.word	0x0800398d
 80039e0:	0800398d 	.word	0x0800398d
 80039e4:	08003b3f 	.word	0x08003b3f
 80039e8:	0800398d 	.word	0x0800398d
 80039ec:	08003a41 	.word	0x08003a41
 80039f0:	0800398d 	.word	0x0800398d
 80039f4:	0800398d 	.word	0x0800398d
 80039f8:	08003b07 	.word	0x08003b07
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	1d1a      	adds	r2, r3, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	602a      	str	r2, [r5, #0]
 8003a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0a3      	b.n	8003b58 <_printf_i+0x1f4>
 8003a10:	6820      	ldr	r0, [r4, #0]
 8003a12:	6829      	ldr	r1, [r5, #0]
 8003a14:	0606      	lsls	r6, r0, #24
 8003a16:	f101 0304 	add.w	r3, r1, #4
 8003a1a:	d50a      	bpl.n	8003a32 <_printf_i+0xce>
 8003a1c:	680e      	ldr	r6, [r1, #0]
 8003a1e:	602b      	str	r3, [r5, #0]
 8003a20:	2e00      	cmp	r6, #0
 8003a22:	da03      	bge.n	8003a2c <_printf_i+0xc8>
 8003a24:	232d      	movs	r3, #45	; 0x2d
 8003a26:	4276      	negs	r6, r6
 8003a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a2c:	485e      	ldr	r0, [pc, #376]	; (8003ba8 <_printf_i+0x244>)
 8003a2e:	230a      	movs	r3, #10
 8003a30:	e019      	b.n	8003a66 <_printf_i+0x102>
 8003a32:	680e      	ldr	r6, [r1, #0]
 8003a34:	602b      	str	r3, [r5, #0]
 8003a36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a3a:	bf18      	it	ne
 8003a3c:	b236      	sxthne	r6, r6
 8003a3e:	e7ef      	b.n	8003a20 <_printf_i+0xbc>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	6820      	ldr	r0, [r4, #0]
 8003a44:	1d19      	adds	r1, r3, #4
 8003a46:	6029      	str	r1, [r5, #0]
 8003a48:	0601      	lsls	r1, r0, #24
 8003a4a:	d501      	bpl.n	8003a50 <_printf_i+0xec>
 8003a4c:	681e      	ldr	r6, [r3, #0]
 8003a4e:	e002      	b.n	8003a56 <_printf_i+0xf2>
 8003a50:	0646      	lsls	r6, r0, #25
 8003a52:	d5fb      	bpl.n	8003a4c <_printf_i+0xe8>
 8003a54:	881e      	ldrh	r6, [r3, #0]
 8003a56:	4854      	ldr	r0, [pc, #336]	; (8003ba8 <_printf_i+0x244>)
 8003a58:	2f6f      	cmp	r7, #111	; 0x6f
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2308      	moveq	r3, #8
 8003a5e:	230a      	movne	r3, #10
 8003a60:	2100      	movs	r1, #0
 8003a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a66:	6865      	ldr	r5, [r4, #4]
 8003a68:	60a5      	str	r5, [r4, #8]
 8003a6a:	2d00      	cmp	r5, #0
 8003a6c:	bfa2      	ittt	ge
 8003a6e:	6821      	ldrge	r1, [r4, #0]
 8003a70:	f021 0104 	bicge.w	r1, r1, #4
 8003a74:	6021      	strge	r1, [r4, #0]
 8003a76:	b90e      	cbnz	r6, 8003a7c <_printf_i+0x118>
 8003a78:	2d00      	cmp	r5, #0
 8003a7a:	d04d      	beq.n	8003b18 <_printf_i+0x1b4>
 8003a7c:	4615      	mov	r5, r2
 8003a7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a82:	fb03 6711 	mls	r7, r3, r1, r6
 8003a86:	5dc7      	ldrb	r7, [r0, r7]
 8003a88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a8c:	4637      	mov	r7, r6
 8003a8e:	42bb      	cmp	r3, r7
 8003a90:	460e      	mov	r6, r1
 8003a92:	d9f4      	bls.n	8003a7e <_printf_i+0x11a>
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d10b      	bne.n	8003ab0 <_printf_i+0x14c>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	07de      	lsls	r6, r3, #31
 8003a9c:	d508      	bpl.n	8003ab0 <_printf_i+0x14c>
 8003a9e:	6923      	ldr	r3, [r4, #16]
 8003aa0:	6861      	ldr	r1, [r4, #4]
 8003aa2:	4299      	cmp	r1, r3
 8003aa4:	bfde      	ittt	le
 8003aa6:	2330      	movle	r3, #48	; 0x30
 8003aa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003aac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ab0:	1b52      	subs	r2, r2, r5
 8003ab2:	6122      	str	r2, [r4, #16]
 8003ab4:	f8cd a000 	str.w	sl, [sp]
 8003ab8:	464b      	mov	r3, r9
 8003aba:	aa03      	add	r2, sp, #12
 8003abc:	4621      	mov	r1, r4
 8003abe:	4640      	mov	r0, r8
 8003ac0:	f7ff fee2 	bl	8003888 <_printf_common>
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d14c      	bne.n	8003b62 <_printf_i+0x1fe>
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8003acc:	b004      	add	sp, #16
 8003ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad2:	4835      	ldr	r0, [pc, #212]	; (8003ba8 <_printf_i+0x244>)
 8003ad4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ad8:	6829      	ldr	r1, [r5, #0]
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ae0:	6029      	str	r1, [r5, #0]
 8003ae2:	061d      	lsls	r5, r3, #24
 8003ae4:	d514      	bpl.n	8003b10 <_printf_i+0x1ac>
 8003ae6:	07df      	lsls	r7, r3, #31
 8003ae8:	bf44      	itt	mi
 8003aea:	f043 0320 	orrmi.w	r3, r3, #32
 8003aee:	6023      	strmi	r3, [r4, #0]
 8003af0:	b91e      	cbnz	r6, 8003afa <_printf_i+0x196>
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	f023 0320 	bic.w	r3, r3, #32
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	2310      	movs	r3, #16
 8003afc:	e7b0      	b.n	8003a60 <_printf_i+0xfc>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	f043 0320 	orr.w	r3, r3, #32
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	2378      	movs	r3, #120	; 0x78
 8003b08:	4828      	ldr	r0, [pc, #160]	; (8003bac <_printf_i+0x248>)
 8003b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b0e:	e7e3      	b.n	8003ad8 <_printf_i+0x174>
 8003b10:	0659      	lsls	r1, r3, #25
 8003b12:	bf48      	it	mi
 8003b14:	b2b6      	uxthmi	r6, r6
 8003b16:	e7e6      	b.n	8003ae6 <_printf_i+0x182>
 8003b18:	4615      	mov	r5, r2
 8003b1a:	e7bb      	b.n	8003a94 <_printf_i+0x130>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	6826      	ldr	r6, [r4, #0]
 8003b20:	6961      	ldr	r1, [r4, #20]
 8003b22:	1d18      	adds	r0, r3, #4
 8003b24:	6028      	str	r0, [r5, #0]
 8003b26:	0635      	lsls	r5, r6, #24
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	d501      	bpl.n	8003b30 <_printf_i+0x1cc>
 8003b2c:	6019      	str	r1, [r3, #0]
 8003b2e:	e002      	b.n	8003b36 <_printf_i+0x1d2>
 8003b30:	0670      	lsls	r0, r6, #25
 8003b32:	d5fb      	bpl.n	8003b2c <_printf_i+0x1c8>
 8003b34:	8019      	strh	r1, [r3, #0]
 8003b36:	2300      	movs	r3, #0
 8003b38:	6123      	str	r3, [r4, #16]
 8003b3a:	4615      	mov	r5, r2
 8003b3c:	e7ba      	b.n	8003ab4 <_printf_i+0x150>
 8003b3e:	682b      	ldr	r3, [r5, #0]
 8003b40:	1d1a      	adds	r2, r3, #4
 8003b42:	602a      	str	r2, [r5, #0]
 8003b44:	681d      	ldr	r5, [r3, #0]
 8003b46:	6862      	ldr	r2, [r4, #4]
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f7fc fb50 	bl	80001f0 <memchr>
 8003b50:	b108      	cbz	r0, 8003b56 <_printf_i+0x1f2>
 8003b52:	1b40      	subs	r0, r0, r5
 8003b54:	6060      	str	r0, [r4, #4]
 8003b56:	6863      	ldr	r3, [r4, #4]
 8003b58:	6123      	str	r3, [r4, #16]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b60:	e7a8      	b.n	8003ab4 <_printf_i+0x150>
 8003b62:	6923      	ldr	r3, [r4, #16]
 8003b64:	462a      	mov	r2, r5
 8003b66:	4649      	mov	r1, r9
 8003b68:	4640      	mov	r0, r8
 8003b6a:	47d0      	blx	sl
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d0ab      	beq.n	8003ac8 <_printf_i+0x164>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	079b      	lsls	r3, r3, #30
 8003b74:	d413      	bmi.n	8003b9e <_printf_i+0x23a>
 8003b76:	68e0      	ldr	r0, [r4, #12]
 8003b78:	9b03      	ldr	r3, [sp, #12]
 8003b7a:	4298      	cmp	r0, r3
 8003b7c:	bfb8      	it	lt
 8003b7e:	4618      	movlt	r0, r3
 8003b80:	e7a4      	b.n	8003acc <_printf_i+0x168>
 8003b82:	2301      	movs	r3, #1
 8003b84:	4632      	mov	r2, r6
 8003b86:	4649      	mov	r1, r9
 8003b88:	4640      	mov	r0, r8
 8003b8a:	47d0      	blx	sl
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d09b      	beq.n	8003ac8 <_printf_i+0x164>
 8003b90:	3501      	adds	r5, #1
 8003b92:	68e3      	ldr	r3, [r4, #12]
 8003b94:	9903      	ldr	r1, [sp, #12]
 8003b96:	1a5b      	subs	r3, r3, r1
 8003b98:	42ab      	cmp	r3, r5
 8003b9a:	dcf2      	bgt.n	8003b82 <_printf_i+0x21e>
 8003b9c:	e7eb      	b.n	8003b76 <_printf_i+0x212>
 8003b9e:	2500      	movs	r5, #0
 8003ba0:	f104 0619 	add.w	r6, r4, #25
 8003ba4:	e7f5      	b.n	8003b92 <_printf_i+0x22e>
 8003ba6:	bf00      	nop
 8003ba8:	08004081 	.word	0x08004081
 8003bac:	08004092 	.word	0x08004092

08003bb0 <memcpy>:
 8003bb0:	440a      	add	r2, r1
 8003bb2:	4291      	cmp	r1, r2
 8003bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bb8:	d100      	bne.n	8003bbc <memcpy+0xc>
 8003bba:	4770      	bx	lr
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bc6:	4291      	cmp	r1, r2
 8003bc8:	d1f9      	bne.n	8003bbe <memcpy+0xe>
 8003bca:	bd10      	pop	{r4, pc}

08003bcc <memmove>:
 8003bcc:	4288      	cmp	r0, r1
 8003bce:	b510      	push	{r4, lr}
 8003bd0:	eb01 0402 	add.w	r4, r1, r2
 8003bd4:	d902      	bls.n	8003bdc <memmove+0x10>
 8003bd6:	4284      	cmp	r4, r0
 8003bd8:	4623      	mov	r3, r4
 8003bda:	d807      	bhi.n	8003bec <memmove+0x20>
 8003bdc:	1e43      	subs	r3, r0, #1
 8003bde:	42a1      	cmp	r1, r4
 8003be0:	d008      	beq.n	8003bf4 <memmove+0x28>
 8003be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bea:	e7f8      	b.n	8003bde <memmove+0x12>
 8003bec:	4402      	add	r2, r0
 8003bee:	4601      	mov	r1, r0
 8003bf0:	428a      	cmp	r2, r1
 8003bf2:	d100      	bne.n	8003bf6 <memmove+0x2a>
 8003bf4:	bd10      	pop	{r4, pc}
 8003bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bfe:	e7f7      	b.n	8003bf0 <memmove+0x24>

08003c00 <_free_r>:
 8003c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c02:	2900      	cmp	r1, #0
 8003c04:	d044      	beq.n	8003c90 <_free_r+0x90>
 8003c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c0a:	9001      	str	r0, [sp, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f1a1 0404 	sub.w	r4, r1, #4
 8003c12:	bfb8      	it	lt
 8003c14:	18e4      	addlt	r4, r4, r3
 8003c16:	f000 f913 	bl	8003e40 <__malloc_lock>
 8003c1a:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <_free_r+0x94>)
 8003c1c:	9801      	ldr	r0, [sp, #4]
 8003c1e:	6813      	ldr	r3, [r2, #0]
 8003c20:	b933      	cbnz	r3, 8003c30 <_free_r+0x30>
 8003c22:	6063      	str	r3, [r4, #4]
 8003c24:	6014      	str	r4, [r2, #0]
 8003c26:	b003      	add	sp, #12
 8003c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c2c:	f000 b90e 	b.w	8003e4c <__malloc_unlock>
 8003c30:	42a3      	cmp	r3, r4
 8003c32:	d908      	bls.n	8003c46 <_free_r+0x46>
 8003c34:	6825      	ldr	r5, [r4, #0]
 8003c36:	1961      	adds	r1, r4, r5
 8003c38:	428b      	cmp	r3, r1
 8003c3a:	bf01      	itttt	eq
 8003c3c:	6819      	ldreq	r1, [r3, #0]
 8003c3e:	685b      	ldreq	r3, [r3, #4]
 8003c40:	1949      	addeq	r1, r1, r5
 8003c42:	6021      	streq	r1, [r4, #0]
 8003c44:	e7ed      	b.n	8003c22 <_free_r+0x22>
 8003c46:	461a      	mov	r2, r3
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	b10b      	cbz	r3, 8003c50 <_free_r+0x50>
 8003c4c:	42a3      	cmp	r3, r4
 8003c4e:	d9fa      	bls.n	8003c46 <_free_r+0x46>
 8003c50:	6811      	ldr	r1, [r2, #0]
 8003c52:	1855      	adds	r5, r2, r1
 8003c54:	42a5      	cmp	r5, r4
 8003c56:	d10b      	bne.n	8003c70 <_free_r+0x70>
 8003c58:	6824      	ldr	r4, [r4, #0]
 8003c5a:	4421      	add	r1, r4
 8003c5c:	1854      	adds	r4, r2, r1
 8003c5e:	42a3      	cmp	r3, r4
 8003c60:	6011      	str	r1, [r2, #0]
 8003c62:	d1e0      	bne.n	8003c26 <_free_r+0x26>
 8003c64:	681c      	ldr	r4, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	6053      	str	r3, [r2, #4]
 8003c6a:	4421      	add	r1, r4
 8003c6c:	6011      	str	r1, [r2, #0]
 8003c6e:	e7da      	b.n	8003c26 <_free_r+0x26>
 8003c70:	d902      	bls.n	8003c78 <_free_r+0x78>
 8003c72:	230c      	movs	r3, #12
 8003c74:	6003      	str	r3, [r0, #0]
 8003c76:	e7d6      	b.n	8003c26 <_free_r+0x26>
 8003c78:	6825      	ldr	r5, [r4, #0]
 8003c7a:	1961      	adds	r1, r4, r5
 8003c7c:	428b      	cmp	r3, r1
 8003c7e:	bf04      	itt	eq
 8003c80:	6819      	ldreq	r1, [r3, #0]
 8003c82:	685b      	ldreq	r3, [r3, #4]
 8003c84:	6063      	str	r3, [r4, #4]
 8003c86:	bf04      	itt	eq
 8003c88:	1949      	addeq	r1, r1, r5
 8003c8a:	6021      	streq	r1, [r4, #0]
 8003c8c:	6054      	str	r4, [r2, #4]
 8003c8e:	e7ca      	b.n	8003c26 <_free_r+0x26>
 8003c90:	b003      	add	sp, #12
 8003c92:	bd30      	pop	{r4, r5, pc}
 8003c94:	20000408 	.word	0x20000408

08003c98 <sbrk_aligned>:
 8003c98:	b570      	push	{r4, r5, r6, lr}
 8003c9a:	4e0e      	ldr	r6, [pc, #56]	; (8003cd4 <sbrk_aligned+0x3c>)
 8003c9c:	460c      	mov	r4, r1
 8003c9e:	6831      	ldr	r1, [r6, #0]
 8003ca0:	4605      	mov	r5, r0
 8003ca2:	b911      	cbnz	r1, 8003caa <sbrk_aligned+0x12>
 8003ca4:	f000 f8bc 	bl	8003e20 <_sbrk_r>
 8003ca8:	6030      	str	r0, [r6, #0]
 8003caa:	4621      	mov	r1, r4
 8003cac:	4628      	mov	r0, r5
 8003cae:	f000 f8b7 	bl	8003e20 <_sbrk_r>
 8003cb2:	1c43      	adds	r3, r0, #1
 8003cb4:	d00a      	beq.n	8003ccc <sbrk_aligned+0x34>
 8003cb6:	1cc4      	adds	r4, r0, #3
 8003cb8:	f024 0403 	bic.w	r4, r4, #3
 8003cbc:	42a0      	cmp	r0, r4
 8003cbe:	d007      	beq.n	8003cd0 <sbrk_aligned+0x38>
 8003cc0:	1a21      	subs	r1, r4, r0
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	f000 f8ac 	bl	8003e20 <_sbrk_r>
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d101      	bne.n	8003cd0 <sbrk_aligned+0x38>
 8003ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	2000040c 	.word	0x2000040c

08003cd8 <_malloc_r>:
 8003cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cdc:	1ccd      	adds	r5, r1, #3
 8003cde:	f025 0503 	bic.w	r5, r5, #3
 8003ce2:	3508      	adds	r5, #8
 8003ce4:	2d0c      	cmp	r5, #12
 8003ce6:	bf38      	it	cc
 8003ce8:	250c      	movcc	r5, #12
 8003cea:	2d00      	cmp	r5, #0
 8003cec:	4607      	mov	r7, r0
 8003cee:	db01      	blt.n	8003cf4 <_malloc_r+0x1c>
 8003cf0:	42a9      	cmp	r1, r5
 8003cf2:	d905      	bls.n	8003d00 <_malloc_r+0x28>
 8003cf4:	230c      	movs	r3, #12
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	2600      	movs	r6, #0
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d00:	4e2e      	ldr	r6, [pc, #184]	; (8003dbc <_malloc_r+0xe4>)
 8003d02:	f000 f89d 	bl	8003e40 <__malloc_lock>
 8003d06:	6833      	ldr	r3, [r6, #0]
 8003d08:	461c      	mov	r4, r3
 8003d0a:	bb34      	cbnz	r4, 8003d5a <_malloc_r+0x82>
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	4638      	mov	r0, r7
 8003d10:	f7ff ffc2 	bl	8003c98 <sbrk_aligned>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	4604      	mov	r4, r0
 8003d18:	d14d      	bne.n	8003db6 <_malloc_r+0xde>
 8003d1a:	6834      	ldr	r4, [r6, #0]
 8003d1c:	4626      	mov	r6, r4
 8003d1e:	2e00      	cmp	r6, #0
 8003d20:	d140      	bne.n	8003da4 <_malloc_r+0xcc>
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	4631      	mov	r1, r6
 8003d26:	4638      	mov	r0, r7
 8003d28:	eb04 0803 	add.w	r8, r4, r3
 8003d2c:	f000 f878 	bl	8003e20 <_sbrk_r>
 8003d30:	4580      	cmp	r8, r0
 8003d32:	d13a      	bne.n	8003daa <_malloc_r+0xd2>
 8003d34:	6821      	ldr	r1, [r4, #0]
 8003d36:	3503      	adds	r5, #3
 8003d38:	1a6d      	subs	r5, r5, r1
 8003d3a:	f025 0503 	bic.w	r5, r5, #3
 8003d3e:	3508      	adds	r5, #8
 8003d40:	2d0c      	cmp	r5, #12
 8003d42:	bf38      	it	cc
 8003d44:	250c      	movcc	r5, #12
 8003d46:	4629      	mov	r1, r5
 8003d48:	4638      	mov	r0, r7
 8003d4a:	f7ff ffa5 	bl	8003c98 <sbrk_aligned>
 8003d4e:	3001      	adds	r0, #1
 8003d50:	d02b      	beq.n	8003daa <_malloc_r+0xd2>
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	442b      	add	r3, r5
 8003d56:	6023      	str	r3, [r4, #0]
 8003d58:	e00e      	b.n	8003d78 <_malloc_r+0xa0>
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	1b52      	subs	r2, r2, r5
 8003d5e:	d41e      	bmi.n	8003d9e <_malloc_r+0xc6>
 8003d60:	2a0b      	cmp	r2, #11
 8003d62:	d916      	bls.n	8003d92 <_malloc_r+0xba>
 8003d64:	1961      	adds	r1, r4, r5
 8003d66:	42a3      	cmp	r3, r4
 8003d68:	6025      	str	r5, [r4, #0]
 8003d6a:	bf18      	it	ne
 8003d6c:	6059      	strne	r1, [r3, #4]
 8003d6e:	6863      	ldr	r3, [r4, #4]
 8003d70:	bf08      	it	eq
 8003d72:	6031      	streq	r1, [r6, #0]
 8003d74:	5162      	str	r2, [r4, r5]
 8003d76:	604b      	str	r3, [r1, #4]
 8003d78:	4638      	mov	r0, r7
 8003d7a:	f104 060b 	add.w	r6, r4, #11
 8003d7e:	f000 f865 	bl	8003e4c <__malloc_unlock>
 8003d82:	f026 0607 	bic.w	r6, r6, #7
 8003d86:	1d23      	adds	r3, r4, #4
 8003d88:	1af2      	subs	r2, r6, r3
 8003d8a:	d0b6      	beq.n	8003cfa <_malloc_r+0x22>
 8003d8c:	1b9b      	subs	r3, r3, r6
 8003d8e:	50a3      	str	r3, [r4, r2]
 8003d90:	e7b3      	b.n	8003cfa <_malloc_r+0x22>
 8003d92:	6862      	ldr	r2, [r4, #4]
 8003d94:	42a3      	cmp	r3, r4
 8003d96:	bf0c      	ite	eq
 8003d98:	6032      	streq	r2, [r6, #0]
 8003d9a:	605a      	strne	r2, [r3, #4]
 8003d9c:	e7ec      	b.n	8003d78 <_malloc_r+0xa0>
 8003d9e:	4623      	mov	r3, r4
 8003da0:	6864      	ldr	r4, [r4, #4]
 8003da2:	e7b2      	b.n	8003d0a <_malloc_r+0x32>
 8003da4:	4634      	mov	r4, r6
 8003da6:	6876      	ldr	r6, [r6, #4]
 8003da8:	e7b9      	b.n	8003d1e <_malloc_r+0x46>
 8003daa:	230c      	movs	r3, #12
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	4638      	mov	r0, r7
 8003db0:	f000 f84c 	bl	8003e4c <__malloc_unlock>
 8003db4:	e7a1      	b.n	8003cfa <_malloc_r+0x22>
 8003db6:	6025      	str	r5, [r4, #0]
 8003db8:	e7de      	b.n	8003d78 <_malloc_r+0xa0>
 8003dba:	bf00      	nop
 8003dbc:	20000408 	.word	0x20000408

08003dc0 <_realloc_r>:
 8003dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc4:	4680      	mov	r8, r0
 8003dc6:	4614      	mov	r4, r2
 8003dc8:	460e      	mov	r6, r1
 8003dca:	b921      	cbnz	r1, 8003dd6 <_realloc_r+0x16>
 8003dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	f7ff bf81 	b.w	8003cd8 <_malloc_r>
 8003dd6:	b92a      	cbnz	r2, 8003de4 <_realloc_r+0x24>
 8003dd8:	f7ff ff12 	bl	8003c00 <_free_r>
 8003ddc:	4625      	mov	r5, r4
 8003dde:	4628      	mov	r0, r5
 8003de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003de4:	f000 f838 	bl	8003e58 <_malloc_usable_size_r>
 8003de8:	4284      	cmp	r4, r0
 8003dea:	4607      	mov	r7, r0
 8003dec:	d802      	bhi.n	8003df4 <_realloc_r+0x34>
 8003dee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003df2:	d812      	bhi.n	8003e1a <_realloc_r+0x5a>
 8003df4:	4621      	mov	r1, r4
 8003df6:	4640      	mov	r0, r8
 8003df8:	f7ff ff6e 	bl	8003cd8 <_malloc_r>
 8003dfc:	4605      	mov	r5, r0
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	d0ed      	beq.n	8003dde <_realloc_r+0x1e>
 8003e02:	42bc      	cmp	r4, r7
 8003e04:	4622      	mov	r2, r4
 8003e06:	4631      	mov	r1, r6
 8003e08:	bf28      	it	cs
 8003e0a:	463a      	movcs	r2, r7
 8003e0c:	f7ff fed0 	bl	8003bb0 <memcpy>
 8003e10:	4631      	mov	r1, r6
 8003e12:	4640      	mov	r0, r8
 8003e14:	f7ff fef4 	bl	8003c00 <_free_r>
 8003e18:	e7e1      	b.n	8003dde <_realloc_r+0x1e>
 8003e1a:	4635      	mov	r5, r6
 8003e1c:	e7df      	b.n	8003dde <_realloc_r+0x1e>
	...

08003e20 <_sbrk_r>:
 8003e20:	b538      	push	{r3, r4, r5, lr}
 8003e22:	4d06      	ldr	r5, [pc, #24]	; (8003e3c <_sbrk_r+0x1c>)
 8003e24:	2300      	movs	r3, #0
 8003e26:	4604      	mov	r4, r0
 8003e28:	4608      	mov	r0, r1
 8003e2a:	602b      	str	r3, [r5, #0]
 8003e2c:	f7fc ffe8 	bl	8000e00 <_sbrk>
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	d102      	bne.n	8003e3a <_sbrk_r+0x1a>
 8003e34:	682b      	ldr	r3, [r5, #0]
 8003e36:	b103      	cbz	r3, 8003e3a <_sbrk_r+0x1a>
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}
 8003e3c:	20000410 	.word	0x20000410

08003e40 <__malloc_lock>:
 8003e40:	4801      	ldr	r0, [pc, #4]	; (8003e48 <__malloc_lock+0x8>)
 8003e42:	f000 b811 	b.w	8003e68 <__retarget_lock_acquire_recursive>
 8003e46:	bf00      	nop
 8003e48:	20000414 	.word	0x20000414

08003e4c <__malloc_unlock>:
 8003e4c:	4801      	ldr	r0, [pc, #4]	; (8003e54 <__malloc_unlock+0x8>)
 8003e4e:	f000 b80c 	b.w	8003e6a <__retarget_lock_release_recursive>
 8003e52:	bf00      	nop
 8003e54:	20000414 	.word	0x20000414

08003e58 <_malloc_usable_size_r>:
 8003e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e5c:	1f18      	subs	r0, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bfbc      	itt	lt
 8003e62:	580b      	ldrlt	r3, [r1, r0]
 8003e64:	18c0      	addlt	r0, r0, r3
 8003e66:	4770      	bx	lr

08003e68 <__retarget_lock_acquire_recursive>:
 8003e68:	4770      	bx	lr

08003e6a <__retarget_lock_release_recursive>:
 8003e6a:	4770      	bx	lr

08003e6c <_init>:
 8003e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6e:	bf00      	nop
 8003e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e72:	bc08      	pop	{r3}
 8003e74:	469e      	mov	lr, r3
 8003e76:	4770      	bx	lr

08003e78 <_fini>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	bf00      	nop
 8003e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7e:	bc08      	pop	{r3}
 8003e80:	469e      	mov	lr, r3
 8003e82:	4770      	bx	lr
